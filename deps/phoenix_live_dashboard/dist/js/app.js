(()=>{var Co=Object.create;var gs=Object.defineProperty;var Ao=Object.getOwnPropertyDescriptor;var xo=Object.getOwnPropertyNames;var Eo=Object.getPrototypeOf,To=Object.prototype.hasOwnProperty;var _o=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Po=(e,t,i,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of xo(t))!To.call(e,s)&&s!==i&&gs(e,s,{get:()=>t[s],enumerable:!(n=Ao(t,s))||n.enumerable});return e};var Ro=(e,t,i)=>(i=e!=null?Co(Eo(e)):{},Po(t||!e||!e.__esModule?gs(i,"default",{value:e,enumerable:!0}):i,e));var ys=_o((on,bs)=>{(function(e,t){typeof define=="function"&&define.amd?define(t):typeof on=="object"?bs.exports=t():e.NProgress=t()})(on,function(){var e={};e.version="0.2.0";var t=e.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};e.configure=function(g){var p,C;for(p in g)C=g[p],C!==void 0&&g.hasOwnProperty(p)&&(t[p]=C);return this},e.status=null,e.set=function(g){var p=e.isStarted();g=i(g,t.minimum,1),e.status=g===1?null:g;var C=e.render(!p),A=C.querySelector(t.barSelector),P=t.speed,N=t.easing;return C.offsetWidth,r(function(M){t.positionUsing===""&&(t.positionUsing=e.getPositioningCSS()),o(A,s(g,P,N)),g===1?(o(C,{transition:"none",opacity:1}),C.offsetWidth,setTimeout(function(){o(C,{transition:"all "+P+"ms linear",opacity:0}),setTimeout(function(){e.remove(),M()},P)},P)):setTimeout(M,P)}),this},e.isStarted=function(){return typeof e.status=="number"},e.start=function(){e.status||e.set(0);var g=function(){setTimeout(function(){!e.status||(e.trickle(),g())},t.trickleSpeed)};return t.trickle&&g(),this},e.done=function(g){return!g&&!e.status?this:e.inc(.3+.5*Math.random()).set(1)},e.inc=function(g){var p=e.status;return p?(typeof g!="number"&&(g=(1-p)*i(Math.random()*p,.1,.95)),p=i(p+g,0,.994),e.set(p)):e.start()},e.trickle=function(){return e.inc(Math.random()*t.trickleRate)},function(){var g=0,p=0;e.promise=function(C){return!C||C.state()==="resolved"?this:(p===0&&e.start(),g++,p++,C.always(function(){p--,p===0?(g=0,e.done()):e.set((g-p)/g)}),this)}}(),e.render=function(g){if(e.isRendered())return document.getElementById("nprogress");u(document.documentElement,"nprogress-busy");var p=document.createElement("div");p.id="nprogress",p.innerHTML=t.template;var C=p.querySelector(t.barSelector),A=g?"-100":n(e.status||0),P=document.querySelector(t.parent),N;return o(C,{transition:"all 0 linear",transform:"translate3d("+A+"%,0,0)"}),t.showSpinner||(N=p.querySelector(t.spinnerSelector),N&&w(N)),P!=document.body&&u(P,"nprogress-custom-parent"),P.appendChild(p),p},e.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(t.parent),"nprogress-custom-parent");var g=document.getElementById("nprogress");g&&w(g)},e.isRendered=function(){return!!document.getElementById("nprogress")},e.getPositioningCSS=function(){var g=document.body.style,p="WebkitTransform"in g?"Webkit":"MozTransform"in g?"Moz":"msTransform"in g?"ms":"OTransform"in g?"O":"";return p+"Perspective"in g?"translate3d":p+"Transform"in g?"translate":"margin"};function i(g,p,C){return g<p?p:g>C?C:g}function n(g){return(-1+g)*100}function s(g,p,C){var A;return t.positionUsing==="translate3d"?A={transform:"translate3d("+n(g)+"%,0,0)"}:t.positionUsing==="translate"?A={transform:"translate("+n(g)+"%,0)"}:A={"margin-left":n(g)+"%"},A.transition="all "+p+"ms "+C,A}var r=function(){var g=[];function p(){var C=g.shift();C&&C(p)}return function(C){g.push(C),g.length==1&&p()}}(),o=function(){var g=["Webkit","O","Moz","ms"],p={};function C(M){return M.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,function(b,_){return _.toUpperCase()})}function A(M){var b=document.body.style;if(M in b)return M;for(var _=g.length,he=M.charAt(0).toUpperCase()+M.slice(1),Y;_--;)if(Y=g[_]+he,Y in b)return Y;return M}function P(M){return M=C(M),p[M]||(p[M]=A(M))}function N(M,b,_){b=P(b),M.style[b]=_}return function(M,b){var _=arguments,he,Y;if(_.length==2)for(he in b)Y=b[he],Y!==void 0&&b.hasOwnProperty(he)&&N(M,he,Y);else N(M,_[1],_[2])}}();function a(g,p){var C=typeof g=="string"?g:v(g);return C.indexOf(" "+p+" ")>=0}function u(g,p){var C=v(g),A=C+p;a(C,p)||(g.className=A.substring(1))}function d(g,p){var C=v(g),A;!a(g,p)||(A=C.replace(" "+p+" "," "),g.className=A.substring(1,A.length-1))}function v(g){return(" "+(g.className||"")+" ").replace(/\s+/gi," ")}function w(g){g&&g.parentNode&&g.parentNode.removeChild(g)}return e})});(function(){var e=t();function t(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function s(r,o){o=o||{bubbles:!1,cancelable:!1,detail:void 0};var a=document.createEvent("CustomEvent");return a.initCustomEvent(r,o.bubbles,o.cancelable,o.detail),a}return s.prototype=window.Event.prototype,s}function i(s,r){var o=document.createElement("input");return o.type="hidden",o.name=s,o.value=r,o}function n(s,r){var o=s.getAttribute("data-to"),a=i("_method",s.getAttribute("data-method")),u=i("_csrf_token",s.getAttribute("data-csrf")),d=document.createElement("form"),v=s.getAttribute("target");d.method=s.getAttribute("data-method")==="get"?"get":"post",d.action=o,d.style.display="hidden",v?d.target=v:r&&(d.target="_blank"),d.appendChild(u),d.appendChild(a),document.body.appendChild(d),d.submit()}window.addEventListener("click",function(s){var r=s.target;if(!s.defaultPrevented)for(;r&&r.getAttribute;){var o=new e("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!r.dispatchEvent(o))return s.preventDefault(),s.stopImmediatePropagation(),!1;if(r.getAttribute("data-method"))return n(r,s.metaKey||s.shiftKey),s.preventDefault(),!1;r=r.parentNode}},!1),window.addEventListener("phoenix.link.click",function(s){var r=s.target.getAttribute("data-confirm");r&&!window.confirm(r)&&s.preventDefault()},!1)})();var qt=e=>typeof e=="function"?e:function(){return e},Do=typeof self<"u"?self:null,Xt=typeof window<"u"?window:null,Kt=Do||Xt||Kt,Lo="2.0.0",Be={connecting:0,open:1,closing:2,closed:3},Io=1e4,Mo=1e3,Ee={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},Qe={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},rn={longpoll:"longpoll",websocket:"websocket"},Oo={complete:4},yi=class{constructor(e,t,i,n){this.channel=e,this.event=t,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=n,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(e){this.timeout=e,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:e,response:t,_ref:i}){this.recHooks.filter(n=>n.status===e).forEach(n=>n.callback(t))}cancelRefEvent(){!this.refEvent||this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,e=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=e,this.matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}trigger(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}},ms=class{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},Ho=class{constructor(e,t,i){this.state=Ee.closed,this.topic=e,this.params=qt(t||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new yi(this,Qe.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new ms(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=Ee.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=Ee.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=Ee.closed,this.socket.remove(this)}),this.onError(n=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,n),this.isJoining()&&this.joinPush.reset(),this.state=Ee.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new yi(this,Qe.leave,qt({}),this.timeout).send(),this.state=Ee.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(Qe.reply,(n,s)=>{this.trigger(this.replyEventName(s),n)})}join(e=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(e){this.on(Qe.close,e)}onError(e){return this.on(Qe.error,t=>e(t))}on(e,t){let i=this.bindingRef++;return this.bindings.push({event:e,ref:i,callback:t}),i}off(e,t){this.bindings=this.bindings.filter(i=>!(i.event===e&&(typeof t>"u"||t===i.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(e,t,i=this.timeout){if(t=t||{},!this.joinedOnce)throw new Error(`tried to push '${e}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let n=new yi(this,e,function(){return t},i);return this.canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}leave(e=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=Ee.leaving;let t=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(Qe.close,"leave")},i=new yi(this,Qe.leave,qt({}),e);return i.receive("ok",()=>t()).receive("timeout",()=>t()),i.send(),this.canPush()||i.trigger("ok",{}),i}onMessage(e,t,i){return t}isMember(e,t,i,n){return this.topic!==e?!1:n&&n!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:i,joinRef:n}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(e=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=Ee.joining,this.joinPush.resend(e))}trigger(e,t,i,n){let s=this.onMessage(e,t,i,n);if(t&&!s)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let r=this.bindings.filter(o=>o.event===e);for(let o=0;o<r.length;o++)r[o].callback(s,i,n||this.joinRef())}replyEventName(e){return`chan_reply_${e}`}isClosed(){return this.state===Ee.closed}isErrored(){return this.state===Ee.errored}isJoined(){return this.state===Ee.joined}isJoining(){return this.state===Ee.joining}isLeaving(){return this.state===Ee.leaving}},Si=class{static request(e,t,i,n,s,r,o){if(Kt.XDomainRequest){let a=new Kt.XDomainRequest;return this.xdomainRequest(a,e,t,n,s,r,o)}else{let a=new Kt.XMLHttpRequest;return this.xhrRequest(a,e,t,i,n,s,r,o)}}static xdomainRequest(e,t,i,n,s,r,o){return e.timeout=s,e.open(t,i),e.onload=()=>{let a=this.parseJSON(e.responseText);o&&o(a)},r&&(e.ontimeout=r),e.onprogress=()=>{},e.send(n),e}static xhrRequest(e,t,i,n,s,r,o,a){return e.open(t,i,!0),e.timeout=r,e.setRequestHeader("Content-Type",n),e.onerror=()=>a&&a(null),e.onreadystatechange=()=>{if(e.readyState===Oo.complete&&a){let u=this.parseJSON(e.responseText);a(u)}},o&&(e.ontimeout=o),e.send(s),e}static parseJSON(e){if(!e||e==="")return null;try{return JSON.parse(e)}catch{return console&&console.log("failed to parse JSON response",e),null}}static serialize(e,t){let i=[];for(var n in e){if(!Object.prototype.hasOwnProperty.call(e,n))continue;let s=t?`${t}[${n}]`:n,r=e[n];typeof r=="object"?i.push(this.serialize(r,s)):i.push(encodeURIComponent(s)+"="+encodeURIComponent(r))}return i.join("&")}static appendParams(e,t){if(Object.keys(t).length===0)return e;let i=e.match(/\?/)?"&":"?";return`${e}${i}${this.serialize(t)}`}},Gt=class{constructor(e){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(e),this.readyState=Be.connecting,this.poll()}normalizeEndpoint(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+rn.websocket),"$1/"+rn.longpoll)}endpointURL(){return Si.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(e,t,i){this.close(e,t,i),this.readyState=Be.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===Be.open||this.readyState===Be.connecting}poll(){this.ajax("GET",null,()=>this.ontimeout(),e=>{if(e){var{status:t,token:i,messages:n}=e;this.token=i}else t=0;switch(t){case 200:n.forEach(s=>{setTimeout(()=>this.onmessage({data:s}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=Be.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${t}`)}})}send(e){this.ajax("POST",e,()=>this.onerror("timeout"),t=>{(!t||t.status!==200)&&(this.onerror(t&&t.status),this.closeAndRetry(1011,"internal server error",!1))})}close(e,t,i){for(let s of this.reqs)s.abort();this.readyState=Be.closed;let n=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:e,reason:t,wasClean:i});typeof CloseEvent<"u"?this.onclose(new CloseEvent("close",n)):this.onclose(n)}ajax(e,t,i,n){let s,r=()=>{this.reqs.delete(s),i()};s=Si.request(e,this.endpointURL(),"application/json",t,this.timeout,r,o=>{this.reqs.delete(s),this.isActive()&&n(o)}),this.reqs.add(s)}};var wi={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(e,t){if(e.payload.constructor===ArrayBuffer)return t(this.binaryEncode(e));{let i=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(i))}},decode(e,t){if(e.constructor===ArrayBuffer)return t(this.binaryDecode(e));{let[i,n,s,r,o]=JSON.parse(e);return t({join_ref:i,ref:n,topic:s,event:r,payload:o})}},binaryEncode(e){let{join_ref:t,ref:i,event:n,topic:s,payload:r}=e,o=this.META_LENGTH+t.length+i.length+s.length+n.length,a=new ArrayBuffer(this.HEADER_LENGTH+o),u=new DataView(a),d=0;u.setUint8(d++,this.KINDS.push),u.setUint8(d++,t.length),u.setUint8(d++,i.length),u.setUint8(d++,s.length),u.setUint8(d++,n.length),Array.from(t,w=>u.setUint8(d++,w.charCodeAt(0))),Array.from(i,w=>u.setUint8(d++,w.charCodeAt(0))),Array.from(s,w=>u.setUint8(d++,w.charCodeAt(0))),Array.from(n,w=>u.setUint8(d++,w.charCodeAt(0)));var v=new Uint8Array(a.byteLength+r.byteLength);return v.set(new Uint8Array(a),0),v.set(new Uint8Array(r),a.byteLength),v.buffer},binaryDecode(e){let t=new DataView(e),i=t.getUint8(0),n=new TextDecoder;switch(i){case this.KINDS.push:return this.decodePush(e,t,n);case this.KINDS.reply:return this.decodeReply(e,t,n);case this.KINDS.broadcast:return this.decodeBroadcast(e,t,n)}},decodePush(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),o=this.HEADER_LENGTH+this.META_LENGTH-1,a=i.decode(e.slice(o,o+n));o=o+n;let u=i.decode(e.slice(o,o+s));o=o+s;let d=i.decode(e.slice(o,o+r));o=o+r;let v=e.slice(o,e.byteLength);return{join_ref:a,ref:null,topic:u,event:d,payload:v}},decodeReply(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),o=t.getUint8(4),a=this.HEADER_LENGTH+this.META_LENGTH,u=i.decode(e.slice(a,a+n));a=a+n;let d=i.decode(e.slice(a,a+s));a=a+s;let v=i.decode(e.slice(a,a+r));a=a+r;let w=i.decode(e.slice(a,a+o));a=a+o;let g=e.slice(a,e.byteLength),p={status:w,response:g};return{join_ref:u,ref:d,topic:v,event:Qe.reply,payload:p}},decodeBroadcast(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=this.HEADER_LENGTH+2,o=i.decode(e.slice(r,r+n));r=r+n;let a=i.decode(e.slice(r,r+s));r=r+s;let u=e.slice(r,e.byteLength);return{join_ref:null,ref:null,topic:o,event:a,payload:u}}},vs=class{constructor(e,t={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=t.timeout||Io,this.transport=t.transport||Kt.WebSocket||Gt,this.establishedConnections=0,this.defaultEncoder=wi.encode.bind(wi),this.defaultDecoder=wi.decode.bind(wi),this.closeWasClean=!1,this.binaryType=t.binaryType||"arraybuffer",this.connectClock=1,this.transport!==Gt?(this.encode=t.encode||this.defaultEncoder,this.decode=t.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let i=null;Xt&&Xt.addEventListener&&(Xt.addEventListener("pagehide",n=>{this.conn&&(this.disconnect(),i=this.connectClock)}),Xt.addEventListener("pageshow",n=>{i===this.connectClock&&(i=null,this.connect())})),this.heartbeatIntervalMs=t.heartbeatIntervalMs||3e4,this.rejoinAfterMs=n=>t.rejoinAfterMs?t.rejoinAfterMs(n):[1e3,2e3,5e3][n-1]||1e4,this.reconnectAfterMs=n=>t.reconnectAfterMs?t.reconnectAfterMs(n):[10,50,100,150,200,250,500,1e3,2e3][n-1]||5e3,this.logger=t.logger||null,this.longpollerTimeout=t.longpollerTimeout||2e4,this.params=qt(t.params||{}),this.endPoint=`${e}/${rn.websocket}`,this.vsn=t.vsn||Lo,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new ms(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return Gt}replaceTransport(e){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.sendBuffer=[],this.conn&&(this.conn.close(),this.conn=null),this.transport=e}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let e=Si.appendParams(Si.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return e.charAt(0)!=="/"?e:e.charAt(1)==="/"?`${this.protocol()}:${e}`:`${this.protocol()}://${location.host}${e}`}disconnect(e,t,i){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,i)}connect(e){e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=qt(e)),!this.conn&&(this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=t=>this.onConnError(t),this.conn.onmessage=t=>this.onConnMessage(t),this.conn.onclose=t=>this.onConnClose(t))}log(e,t,i){this.logger(e,t,i)}hasLogger(){return this.logger!==null}onOpen(e){let t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}onClose(e){let t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}onError(e){let t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}onMessage(e){let t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}ping(e){if(!this.isConnected())return!1;let t=this.makeRef(),i=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:t});let n=this.onMessage(s=>{s.ref===t&&(this.off([n]),e(Date.now()-i))});return!0}onConnOpen(){this.hasLogger()&&this.log("transport",`connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,e])=>e())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.abnormalClose("heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,clearTimeout(this.heartbeatTimer),setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(e,t,i){if(!this.conn)return e&&e();this.waitForBufferDone(()=>{this.conn&&(t?this.conn.close(t,i||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onclose=function(){},this.conn=null),e&&e()})})}waitForBufferDone(e,t=1){if(t===5||!this.conn||!this.conn.bufferedAmount){e();return}setTimeout(()=>{this.waitForBufferDone(e,t+1)},150*t)}waitForSocketClosed(e,t=1){if(t===5||!this.conn||this.conn.readyState===Be.closed){e();return}setTimeout(()=>{this.waitForSocketClosed(e,t+1)},150*t)}onConnClose(e){let t=e&&e.code;this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),clearTimeout(this.heartbeatTimer),!this.closeWasClean&&t!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,i])=>i(e))}onConnError(e){this.hasLogger()&&this.log("transport",e);let t=this.transport,i=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,n])=>{n(e,t,i)}),(t===this.transport||i>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(e=>{e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(Qe.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case Be.connecting:return"connecting";case Be.open:return"open";case Be.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter(t=>t.joinRef()!==e.joinRef())}off(e){for(let t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(([i])=>e.indexOf(i)===-1)}channel(e,t={}){let i=new Ho(e,t,this);return this.channels.push(i),i}push(e){if(this.hasLogger()){let{topic:t,event:i,payload:n,ref:s,join_ref:r}=e;this.log("push",`${t} ${i} (${r}, ${s})`,n)}this.isConnected()?this.encode(e,t=>this.conn.send(t)):this.sendBuffer.push(()=>this.encode(e,t=>this.conn.send(t)))}makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}abnormalClose(e){this.closeWasClean=!1,this.isConnected()&&this.conn.close(Mo,e)}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}onConnMessage(e){this.decode(e.data,t=>{let{topic:i,event:n,payload:s,ref:r,join_ref:o}=t;r&&r===this.pendingHeartbeatRef&&(clearTimeout(this.heartbeatTimer),this.pendingHeartbeatRef=null,setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${s.status||""} ${i} ${n} ${r&&"("+r+")"||""}`,s);for(let a=0;a<this.channels.length;a++){let u=this.channels[a];!u.isMember(i,n,s,o)||u.trigger(n,s,r,o)}for(let a=0;a<this.stateChangeCallbacks.message.length;a++){let[,u]=this.stateChangeCallbacks.message[a];u(t)}})}leaveOpenTopic(e){let t=this.channels.find(i=>i.topic===e&&(i.isJoined()||i.isJoining()));t&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${e}"`),t.leave())}};var Vn=Ro(ys());var js="consecutive-reloads",No=10,Fo=5e3,Uo=1e4,$o=3e4,Bs=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading"],_e="data-phx-component",ln="data-phx-link",jo="track-static",Bo="data-phx-link-state",Ye="data-phx-ref",wt="data-phx-ref-src",Vs="track-uploads",St="data-phx-upload-ref",wn="data-phx-preflighted-refs",Vo="data-phx-done-refs",ws="drop-target",gn="data-phx-active-refs",Di="phx:live-file:updated",mn="data-phx-skip",Ss="data-phx-prune",ks="page-loading",Cs="phx-connected",an="phx-loading",As="phx-no-feedback",xs="phx-error",Ot="data-phx-parent-id",Sn="data-phx-main",ri="data-phx-root-id",Jo="trigger-action",vn="feedback-for",Js="phx-has-focused",Wo=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],Ws=["checkbox","radio"],zs="phx-has-submitted",ut="data-phx-session",Nt=`[${ut}]`,Es="data-phx-sticky",ni="data-phx-static",hn="data-phx-readonly",ki="data-phx-disabled",bn="disable-with",Ci="data-phx-disable-with-restore",Qt="hook",zo="debounce",Yo="throttle",yn="update",Xo="key",Ve="phxPrivate",Ts="auto-recover",Ai="phx:live-socket:debug",cn="phx:live-socket:profiling",un="phx:live-socket:latency-sim",qo="progress",_s="mounted",Ko=1,Go=200,Qo="phx-",Zo=3e4,Zt="debounce-trigger",xi="throttled",Ps="debounce-prev-key",el={debounce:300,throttle:300},Rs="d",Je="s",Te="c",Ds="e",Ls="r",Is="t",tl="p",il=class{constructor(e,t,i){this.liveSocket=i,this.entry=e,this.offset=0,this.chunkSize=t,this.chunkTimer=null,this.uploadChannel=i.channel(`lvu:${e.ref}`,{token:e.metadata()})}error(e){clearTimeout(this.chunkTimer),this.uploadChannel.leave(),this.entry.error(e)}upload(){this.uploadChannel.onError(e=>this.error(e)),this.uploadChannel.join().receive("ok",e=>this.readNextChunk()).receive("error",e=>this.error(e))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let e=new window.FileReader,t=this.entry.file.slice(this.offset,this.chunkSize+this.offset);e.onload=i=>{if(i.target.error===null)this.offset+=i.target.result.byteLength,this.pushChunk(i.target.result);else return me("Read error: "+i.target.error)},e.readAsArrayBuffer(t)}pushChunk(e){!this.uploadChannel.isJoined()||this.uploadChannel.push("chunk",e).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))})}},me=(e,t)=>console.error&&console.error(e,t),ct=e=>{let t=typeof e;return t==="number"||t==="string"&&/^(0|[1-9]\d*)$/.test(e)};function nl(){let e=new Set,t=document.querySelectorAll("*[id]");for(let i=0,n=t.length;i<n;i++)e.has(t[i].id)?console.error(`Multiple IDs detected: ${t[i].id}. Ensure unique element ids.`):e.add(t[i].id)}var sl=(e,t,i,n)=>{e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,n)},dn=e=>typeof e=="function"?e:function(){return e},Li=e=>JSON.parse(JSON.stringify(e)),si=(e,t,i)=>{do{if(e.matches(`[${t}]`))return e;e=e.parentElement||e.parentNode}while(e!==null&&e.nodeType===1&&!(i&&i.isSameNode(e)||e.matches(Nt)));return null},ei=e=>e!==null&&typeof e=="object"&&!(e instanceof Array),rl=(e,t)=>JSON.stringify(e)===JSON.stringify(t),Ms=e=>{for(let t in e)return!1;return!0},Ze=(e,t)=>e&&t(e),ol=function(e,t,i,n){e.forEach(s=>{new il(s,i.config.chunk_size,n).upload()})},Ys={canPushState(){return typeof history.pushState<"u"},dropLocal(e,t,i){return e.removeItem(this.localKey(t,i))},updateLocal(e,t,i,n,s){let r=this.getLocal(e,t,i),o=this.localKey(t,i),a=r===null?n:s(r);return e.setItem(o,JSON.stringify(a)),a},getLocal(e,t,i){return JSON.parse(e.getItem(this.localKey(t,i)))},updateCurrentState(e){!this.canPushState()||history.replaceState(e(history.state||{}),"",window.location.href)},pushState(e,t,i){if(this.canPushState()){if(i!==window.location.href){if(t.type=="redirect"&&t.scroll){let s=history.state||{};s.scroll=t.scroll,history.replaceState(s,"",window.location.href)}delete t.scroll,history[e+"State"](t,"",i||null);let n=this.getHashTargetEl(window.location.hash);n?n.scrollIntoView():t.type==="redirect"&&window.scroll(0,0)}}else this.redirect(i)},setCookie(e,t){document.cookie=`${e}=${t}`},getCookie(e){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${e}s*=s*([^;]*).*$)|^.*$`),"$1")},redirect(e,t){t&&Ys.setCookie("__phoenix_flash__",t+"; max-age=60000; path=/"),window.location=e},localKey(e,t){return`${e}-${t}`},getHashTargetEl(e){let t=e.toString().substring(1);if(t!=="")return document.getElementById(t)||document.querySelector(`a[name="${t}"]`)}},We=Ys,Oe={byId(e){return document.getElementById(e)||me(`no id found for ${e}`)},removeClass(e,t){e.classList.remove(t),e.classList.length===0&&e.removeAttribute("class")},all(e,t,i){if(!e)return[];let n=Array.from(e.querySelectorAll(t));return i?n.forEach(i):n},childNodeLength(e){let t=document.createElement("template");return t.innerHTML=e,t.content.childElementCount},isUploadInput(e){return e.type==="file"&&e.getAttribute(St)!==null},findUploadInputs(e){return this.all(e,`input[type="file"][${St}]`)},findComponentNodeList(e,t){return this.filterWithinSameLiveView(this.all(e,`[${_e}="${t}"]`),e)},isPhxDestroyed(e){return!!(e.id&&Oe.private(e,"destroyed"))},markPhxChildDestroyed(e){this.isPhxChild(e)&&e.setAttribute(ut,""),this.putPrivate(e,"destroyed",!0)},findPhxChildrenInFragment(e,t){let i=document.createElement("template");return i.innerHTML=e,this.findPhxChildren(i.content,t)},isIgnored(e,t){return(e.getAttribute(t)||e.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(e,t,i){return e.getAttribute&&i.indexOf(e.getAttribute(t))>=0},findPhxSticky(e){return this.all(e,`[${Es}]`)},findPhxChildren(e,t){return this.all(e,`${Nt}[${Ot}="${t}"]`)},findParentCIDs(e,t){let i=new Set(t),n=t.reduce((s,r)=>{let o=`[${_e}="${r}"] [${_e}]`;return this.filterWithinSameLiveView(this.all(e,o),e).map(a=>parseInt(a.getAttribute(_e))).forEach(a=>s.delete(a)),s},i);return n.size===0?new Set(t):n},filterWithinSameLiveView(e,t){return t.querySelector(Nt)?e.filter(i=>this.withinSameLiveView(i,t)):e},withinSameLiveView(e,t){for(;e=e.parentNode;){if(e.isSameNode(t))return!0;if(e.getAttribute(ut)!==null)return!1}},private(e,t){return e[Ve]&&e[Ve][t]},deletePrivate(e,t){e[Ve]&&delete e[Ve][t]},putPrivate(e,t,i){e[Ve]||(e[Ve]={}),e[Ve][t]=i},updatePrivate(e,t,i,n){let s=this.private(e,t);s===void 0?this.putPrivate(e,t,n(i)):this.putPrivate(e,t,n(s))},copyPrivates(e,t){t[Ve]&&(e[Ve]=t[Ve])},putTitle(e){let t=document.querySelector("title"),{prefix:i,suffix:n}=t.dataset;document.title=`${i||""}${e}${n||""}`},debounce(e,t,i,n,s,r,o,a){let u=e.getAttribute(i),d=e.getAttribute(s);u===""&&(u=n),d===""&&(d=r);let v=u||d;switch(v){case null:return a();case"blur":this.once(e,"debounce-blur")&&e.addEventListener("blur",()=>a());return;default:let w=parseInt(v),g=()=>d?this.deletePrivate(e,xi):a(),p=this.incCycle(e,Zt,g);if(isNaN(w))return me(`invalid throttle/debounce value: ${v}`);if(d){let A=!1;if(t.type==="keydown"){let P=this.private(e,Ps);this.putPrivate(e,Ps,t.key),A=P!==t.key}if(!A&&this.private(e,xi))return!1;a(),this.putPrivate(e,xi,!0),setTimeout(()=>{o()&&this.triggerCycle(e,Zt)},w)}else setTimeout(()=>{o()&&this.triggerCycle(e,Zt,p)},w);let C=e.form;C&&this.once(C,"bind-debounce")&&C.addEventListener("submit",()=>{Array.from(new FormData(C).entries(),([A])=>{let P=C.querySelector(`[name="${A}"]`);this.incCycle(P,Zt),this.deletePrivate(P,xi)})}),this.once(e,"bind-debounce")&&e.addEventListener("blur",()=>this.triggerCycle(e,Zt))}},triggerCycle(e,t,i){let[n,s]=this.private(e,t);i||(i=n),i===n&&(this.incCycle(e,t),s())},once(e,t){return this.private(e,t)===!0?!1:(this.putPrivate(e,t,!0),!0)},incCycle(e,t,i=function(){}){let[n]=this.private(e,t)||[0,i];return n++,this.putPrivate(e,t,[n,i]),n},discardError(e,t,i){let n=t.getAttribute&&t.getAttribute(i),s=n&&e.querySelector(`[id="${n}"], [name="${n}"], [name="${n}[]"]`);!s||this.private(s,Js)||this.private(s.form,zs)||t.classList.add(As)},showError(e,t){(e.id||e.name)&&this.all(e.form,`[${t}="${e.id}"], [${t}="${e.name}"]`,i=>{this.removeClass(i,As)})},isPhxChild(e){return e.getAttribute&&e.getAttribute(Ot)},isPhxSticky(e){return e.getAttribute&&e.getAttribute(Es)!==null},firstPhxChild(e){return this.isPhxChild(e)?e:this.all(e,`[${Ot}]`)[0]},dispatchEvent(e,t,i={}){let s={bubbles:i.bubbles===void 0?!0:!!i.bubbles,cancelable:!0,detail:i.detail||{}},r=t==="click"?new MouseEvent("click",s):new CustomEvent(t,s);e.dispatchEvent(r)},cloneNode(e,t){if(typeof t>"u")return e.cloneNode(!0);{let i=e.cloneNode(!1);return i.innerHTML=t,i}},mergeAttrs(e,t,i={}){let n=i.exclude||[],s=i.isIgnored,r=t.attributes;for(let a=r.length-1;a>=0;a--){let u=r[a].name;n.indexOf(u)<0&&e.setAttribute(u,t.getAttribute(u))}let o=e.attributes;for(let a=o.length-1;a>=0;a--){let u=o[a].name;s?u.startsWith("data-")&&!t.hasAttribute(u)&&e.removeAttribute(u):t.hasAttribute(u)||e.removeAttribute(u)}},mergeFocusedInput(e,t){e instanceof HTMLSelectElement||Oe.mergeAttrs(e,t,{exclude:["value"]}),t.readOnly?e.setAttribute("readonly",!0):e.removeAttribute("readonly")},hasSelectionRange(e){return e.setSelectionRange&&(e.type==="text"||e.type==="textarea")},restoreFocus(e,t,i){if(!Oe.isTextualInput(e))return;let n=e.matches(":focus");e.readOnly&&e.blur(),n||e.focus(),this.hasSelectionRange(e)&&e.setSelectionRange(t,i)},isFormInput(e){return/^(?:input|select|textarea)$/i.test(e.tagName)&&e.type!=="button"},syncAttrsToProps(e){e instanceof HTMLInputElement&&Ws.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=e.getAttribute("checked")!==null)},isTextualInput(e){return Wo.indexOf(e.type)>=0},isNowTriggerFormExternal(e,t){return e.getAttribute&&e.getAttribute(t)!==null},syncPendingRef(e,t,i){let n=e.getAttribute(Ye);if(n===null)return!0;let s=e.getAttribute(wt);return Oe.isFormInput(e)||e.getAttribute(i)!==null?(Oe.isUploadInput(e)&&Oe.mergeAttrs(e,t,{isIgnored:!0}),Oe.putPrivate(e,Ye,t),!1):(Bs.forEach(r=>{e.classList.contains(r)&&t.classList.add(r)}),t.setAttribute(Ye,n),t.setAttribute(wt,s),!0)},cleanChildNodes(e,t){if(Oe.isPhxUpdate(e,t,["append","prepend"])){let i=[];e.childNodes.forEach(n=>{n.id||(n.nodeType===Node.TEXT_NODE&&n.nodeValue.trim()===""||me(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(n.outerHTML||n.nodeValue).trim()}"

`),i.push(n))}),i.forEach(n=>n.remove())}},replaceRootContainer(e,t,i){let n=new Set(["id",ut,ni,Sn,ri]);if(e.tagName.toLowerCase()===t.toLowerCase())return Array.from(e.attributes).filter(s=>!n.has(s.name.toLowerCase())).forEach(s=>e.removeAttribute(s.name)),Object.keys(i).filter(s=>!n.has(s.toLowerCase())).forEach(s=>e.setAttribute(s,i[s])),e;{let s=document.createElement(t);return Object.keys(i).forEach(r=>s.setAttribute(r,i[r])),n.forEach(r=>s.setAttribute(r,e.getAttribute(r))),s.innerHTML=e.innerHTML,e.replaceWith(s),s}},getSticky(e,t,i){let n=(Oe.private(e,"sticky")||[]).find(([s])=>t===s);if(n){let[s,r,o]=n;return o}else return typeof i=="function"?i():i},deleteSticky(e,t){this.updatePrivate(e,"sticky",[],i=>i.filter(([n,s])=>n!==t))},putSticky(e,t,i){let n=i(e);this.updatePrivate(e,"sticky",[],s=>{let r=s.findIndex(([o])=>t===o);return r>=0?s[r]=[t,i,n]:s.push([t,i,n]),s})},applyStickyOperations(e){let t=Oe.private(e,"sticky");!t||t.forEach(([i,n,s])=>this.putSticky(e,i,n))}},y=Oe,fn=class{static isActive(e,t){let i=t._phxRef===void 0,s=e.getAttribute(gn).split(",").indexOf(ge.genFileRef(t))>=0;return t.size>0&&(i||s)}static isPreflighted(e,t){return e.getAttribute(wn).split(",").indexOf(ge.genFileRef(t))>=0&&this.isActive(e,t)}constructor(e,t,i){this.ref=ge.genFileRef(t),this.fileEl=e,this.file=t,this.view=i,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(Di,this._onElUpdated)}metadata(){return this.meta}progress(e){this._progress=Math.floor(e),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{ge.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}cancel(){this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(e="failed"){this.fileEl.removeEventListener(Di,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:e}),ge.clearFiles(this.fileEl)}onDone(e){this._onDone=()=>{this.fileEl.removeEventListener(Di,this._onElUpdated),e()}}onElUpdated(){this.fileEl.getAttribute(gn).split(",").indexOf(this.ref)===-1&&this.cancel()}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref}}uploader(e){if(this.meta.uploader){let t=e[this.meta.uploader]||me(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:t}}else return{name:"channel",callback:ol}}zipPostFlight(e){this.meta=e.entries[this.ref],this.meta||me(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:e})}},ll=0,ge=class{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(ll++).toString(),e._phxRef)}static getEntryDataURL(e,t,i){let n=this.activeFiles(e).find(s=>this.genFileRef(s)===t);i(URL.createObjectURL(n))}static hasUploadsInProgress(e){let t=0;return y.findUploadInputs(e).forEach(i=>{i.getAttribute(wn)!==i.getAttribute(Vo)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),i={};return t.forEach(n=>{let s={path:e.name},r=e.getAttribute(St);i[r]=i[r]||[],s.ref=this.genFileRef(n),s.last_modified=n.lastModified,s.name=n.name||s.ref,s.relative_path=n.webkitRelativePath,s.type=n.type,s.size=n.size,i[r].push(s)}),i}static clearFiles(e){e.value=null,e.removeAttribute(St),y.putPrivate(e,"files",[])}static untrackFile(e,t){y.putPrivate(e,"files",y.private(e,"files").filter(i=>!Object.is(i,t)))}static trackFiles(e,t){if(e.getAttribute("multiple")!==null){let i=t.filter(n=>!this.activeFiles(e).find(s=>Object.is(s,n)));y.putPrivate(e,"files",this.activeFiles(e).concat(i)),e.value=null}else y.putPrivate(e,"files",t)}static activeFileInputs(e){let t=y.findUploadInputs(e);return Array.from(t).filter(i=>i.files&&this.activeFiles(i).length>0)}static activeFiles(e){return(y.private(e,"files")||[]).filter(t=>fn.isActive(e,t))}static inputsAwaitingPreflight(e){let t=y.findUploadInputs(e);return Array.from(t).filter(i=>this.filesAwaitingPreflight(i).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!fn.isPreflighted(e,t))}constructor(e,t,i){this.view=t,this.onComplete=i,this._entries=Array.from(ge.filesAwaitingPreflight(e)||[]).map(n=>new fn(e,n,t)),this.numEntriesInProgress=this._entries.length}entries(){return this._entries}initAdapterUpload(e,t,i){this._entries=this._entries.map(s=>(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()}),s));let n=this._entries.reduce((s,r)=>{let{name:o,callback:a}=r.uploader(i.uploaders);return s[o]=s[o]||{callback:a,entries:[]},s[o].entries.push(r),s},{});for(let s in n){let{callback:r,entries:o}=n[s];r(o,t,e,i)}}},al={focusMain(){let e=document.querySelector("main h1, main, h1");if(e){let t=e.tabIndex;e.tabIndex=-1,e.focus(),e.tabIndex=t}},anyOf(e,t){return t.find(i=>e instanceof i)},isFocusable(e,t){return e instanceof HTMLAnchorElement&&e.rel!=="ignore"||e instanceof HTMLAreaElement&&e.href!==void 0||!e.disabled&&this.anyOf(e,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||e instanceof HTMLIFrameElement||e.tabIndex>0||!t&&e.tabIndex===0&&e.getAttribute("tabindex")!==null&&e.getAttribute("aria-hidden")!=="true"},attemptFocus(e,t){if(this.isFocusable(e,t))try{e.focus()}catch{}return!!document.activeElement&&document.activeElement.isSameNode(e)},focusFirstInteractive(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t,!0)||this.focusFirstInteractive(t,!0))return!0;t=t.nextElementSibling}},focusFirst(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t)||this.focusFirst(t))return!0;t=t.nextElementSibling}},focusLast(e){let t=e.lastElementChild;for(;t;){if(this.attemptFocus(t)||this.focusLast(t))return!0;t=t.previousElementSibling}}},Ht=al,hl={LiveFileUpload:{activeRefs(){return this.el.getAttribute(gn)},preflightedRefs(){return this.el.getAttribute(wn)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let e=this.preflightedRefs();this.preflightedWas!==e&&(this.preflightedWas=e,e===""&&this.__view.cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(Di))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(St)),ge.getEntryDataURL(this.inputEl,this.ref,e=>{this.url=e,this.el.src=e})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",()=>Ht.focusLast(this.el)),this.focusEnd.addEventListener("focus",()=>Ht.focusFirst(this.el)),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&Ht.focusFirst(this.el)}}},cl=hl,ul=class{constructor(e,t,i){let n=new Set,s=new Set([...t.children].map(o=>o.id)),r=[];Array.from(e.children).forEach(o=>{if(o.id&&(n.add(o.id),s.has(o.id))){let a=o.previousElementSibling&&o.previousElementSibling.id;r.push({elementId:o.id,previousElementId:a})}}),this.containerId=t.id,this.updateType=i,this.elementsToModify=r,this.elementIdsToAdd=[...s].filter(o=>!n.has(o))}perform(){let e=y.byId(this.containerId);this.elementsToModify.forEach(t=>{t.previousElementId?Ze(document.getElementById(t.previousElementId),i=>{Ze(document.getElementById(t.elementId),n=>{n.previousElementSibling&&n.previousElementSibling.id==i.id||i.insertAdjacentElement("afterend",n)})}):Ze(document.getElementById(t.elementId),i=>{i.previousElementSibling==null||e.insertAdjacentElement("afterbegin",i)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(t=>{Ze(document.getElementById(t),i=>e.insertAdjacentElement("afterbegin",i))})}},Os=11;function dl(e,t){var i=t.attributes,n,s,r,o,a;if(!(t.nodeType===Os||e.nodeType===Os)){for(var u=i.length-1;u>=0;u--)n=i[u],s=n.name,r=n.namespaceURI,o=n.value,r?(s=n.localName||s,a=e.getAttributeNS(r,s),a!==o&&(n.prefix==="xmlns"&&(s=n.name),e.setAttributeNS(r,s,o))):(a=e.getAttribute(s),a!==o&&e.setAttribute(s,o));for(var d=e.attributes,v=d.length-1;v>=0;v--)n=d[v],s=n.name,r=n.namespaceURI,r?(s=n.localName||s,t.hasAttributeNS(r,s)||e.removeAttributeNS(r,s)):t.hasAttribute(s)||e.removeAttribute(s)}}var Ei,fl="http://www.w3.org/1999/xhtml",ke=typeof document>"u"?void 0:document,pl=!!ke&&"content"in ke.createElement("template"),gl=!!ke&&ke.createRange&&"createContextualFragment"in ke.createRange();function ml(e){var t=ke.createElement("template");return t.innerHTML=e,t.content.childNodes[0]}function vl(e){Ei||(Ei=ke.createRange(),Ei.selectNode(ke.body));var t=Ei.createContextualFragment(e);return t.childNodes[0]}function bl(e){var t=ke.createElement("body");return t.innerHTML=e,t.childNodes[0]}function yl(e){return e=e.trim(),pl?ml(e):gl?vl(e):bl(e)}function Ti(e,t){var i=e.nodeName,n=t.nodeName,s,r;return i===n?!0:(s=i.charCodeAt(0),r=n.charCodeAt(0),s<=90&&r>=97?i===n.toUpperCase():r<=90&&s>=97?n===i.toUpperCase():!1)}function wl(e,t){return!t||t===fl?ke.createElement(e):ke.createElementNS(t,e)}function Sl(e,t){for(var i=e.firstChild;i;){var n=i.nextSibling;t.appendChild(i),i=n}return t}function pn(e,t,i){e[i]!==t[i]&&(e[i]=t[i],e[i]?e.setAttribute(i,""):e.removeAttribute(i))}var Hs={OPTION:function(e,t){var i=e.parentNode;if(i){var n=i.nodeName.toUpperCase();n==="OPTGROUP"&&(i=i.parentNode,n=i&&i.nodeName.toUpperCase()),n==="SELECT"&&!i.hasAttribute("multiple")&&(e.hasAttribute("selected")&&!t.selected&&(e.setAttribute("selected","selected"),e.removeAttribute("selected")),i.selectedIndex=-1)}pn(e,t,"selected")},INPUT:function(e,t){pn(e,t,"checked"),pn(e,t,"disabled"),e.value!==t.value&&(e.value=t.value),t.hasAttribute("value")||e.removeAttribute("value")},TEXTAREA:function(e,t){var i=t.value;e.value!==i&&(e.value=i);var n=e.firstChild;if(n){var s=n.nodeValue;if(s==i||!i&&s==e.placeholder)return;n.nodeValue=i}},SELECT:function(e,t){if(!t.hasAttribute("multiple")){for(var i=-1,n=0,s=e.firstChild,r,o;s;)if(o=s.nodeName&&s.nodeName.toUpperCase(),o==="OPTGROUP")r=s,s=r.firstChild;else{if(o==="OPTION"){if(s.hasAttribute("selected")){i=n;break}n++}s=s.nextSibling,!s&&r&&(s=r.nextSibling,r=null)}e.selectedIndex=i}}},ti=1,kl=11,Ns=3,Fs=8;function yt(){}function Cl(e){if(e)return e.getAttribute&&e.getAttribute("id")||e.id}function Al(e){return function(i,n,s){if(s||(s={}),typeof n=="string")if(i.nodeName==="#document"||i.nodeName==="HTML"||i.nodeName==="BODY"){var r=n;n=ke.createElement("html"),n.innerHTML=r}else n=yl(n);var o=s.getNodeKey||Cl,a=s.onBeforeNodeAdded||yt,u=s.onNodeAdded||yt,d=s.onBeforeElUpdated||yt,v=s.onElUpdated||yt,w=s.onBeforeNodeDiscarded||yt,g=s.onNodeDiscarded||yt,p=s.onBeforeElChildrenUpdated||yt,C=s.childrenOnly===!0,A=Object.create(null),P=[];function N(D){P.push(D)}function M(D,T){if(D.nodeType===ti)for(var R=D.firstChild;R;){var $=void 0;T&&($=o(R))?N($):(g(R),R.firstChild&&M(R,T)),R=R.nextSibling}}function b(D,T,R){w(D)!==!1&&(T&&T.removeChild(D),g(D),M(D,R))}function _(D){if(D.nodeType===ti||D.nodeType===kl)for(var T=D.firstChild;T;){var R=o(T);R&&(A[R]=T),_(T),T=T.nextSibling}}_(i);function he(D){u(D);for(var T=D.firstChild;T;){var R=T.nextSibling,$=o(T);if($){var Ce=A[$];Ce&&Ti(T,Ce)?(T.parentNode.replaceChild(Ce,T),Pe(Ce,T)):he(T)}else he(T);T=R}}function Y(D,T,R){for(;T;){var $=T.nextSibling;(R=o(T))?N(R):b(T,D,!0),T=$}}function Pe(D,T,R){var $=o(T);$&&delete A[$],!(!R&&(d(D,T)===!1||(e(D,T),v(D),p(D,T)===!1)))&&(D.nodeName!=="TEXTAREA"?Ue(D,T):Hs.TEXTAREA(D,T))}function Ue(D,T){var R=T.firstChild,$=D.firstChild,Ce,$e,H,Xe,je;e:for(;R;){for(Xe=R.nextSibling,Ce=o(R);$;){if(H=$.nextSibling,R.isSameNode&&R.isSameNode($)){R=Xe,$=H;continue e}$e=o($);var we=$.nodeType,z=void 0;if(we===R.nodeType&&(we===ti?(Ce?Ce!==$e&&((je=A[Ce])?H===je?z=!1:(D.insertBefore(je,$),$e?N($e):b($,D,!0),$=je):z=!1):$e&&(z=!1),z=z!==!1&&Ti($,R),z&&Pe($,R)):(we===Ns||we==Fs)&&(z=!0,$.nodeValue!==R.nodeValue&&($.nodeValue=R.nodeValue))),z){R=Xe,$=H;continue e}$e?N($e):b($,D,!0),$=H}if(Ce&&(je=A[Ce])&&Ti(je,R))D.appendChild(je),Pe(je,R);else{var Q=a(R);Q!==!1&&(Q&&(R=Q),R.actualize&&(R=R.actualize(D.ownerDocument||ke)),D.appendChild(R),he(R))}R=Xe,$=H}Y(D,$,$e);var Wt=Hs[D.nodeName];Wt&&Wt(D,T)}var K=i,Ie=K.nodeType,ui=n.nodeType;if(!C){if(Ie===ti)ui===ti?Ti(i,n)||(g(i),K=Sl(i,wl(n.nodeName,n.namespaceURI))):K=n;else if(Ie===Ns||Ie===Fs){if(ui===Ie)return K.nodeValue!==n.nodeValue&&(K.nodeValue=n.nodeValue),K;K=n}}if(K===n)g(i);else{if(n.isSameNode&&n.isSameNode(K))return;if(Pe(K,n,C),P)for(var Jt=0,U=P.length;Jt<U;Jt++){var pt=A[P[Jt]];pt&&b(pt,pt.parentNode,!1)}}return!C&&K!==i&&i.parentNode&&(K.actualize&&(K=K.actualize(i.ownerDocument||ke)),i.parentNode.replaceChild(K,i)),K}}var xl=Al(dl),Us=xl,_i=class{static patchEl(e,t,i){Us(e,t,{childrenOnly:!1,onBeforeElUpdated:(n,s)=>{if(i&&i.isSameNode(n)&&y.isFormInput(n))return y.mergeFocusedInput(n,s),!1}})}constructor(e,t,i,n,s){this.view=e,this.liveSocket=e.liveSocket,this.container=t,this.id=i,this.rootID=e.root.id,this.html=n,this.targetCID=s,this.cidPatch=ct(this.targetCID),this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(e,t){this.callbacks[`before${e}`].push(t)}after(e,t){this.callbacks[`after${e}`].push(t)}trackBefore(e,...t){this.callbacks[`before${e}`].forEach(i=>i(...t))}trackAfter(e,...t){this.callbacks[`after${e}`].forEach(i=>i(...t))}markPrunableContentForRemoval(){y.all(this.container,"[phx-update=append] > *, [phx-update=prepend] > *",e=>{e.setAttribute(Ss,"")})}perform(){let{view:e,liveSocket:t,container:i,html:n}=this,s=this.isCIDPatch()?this.targetCIDContainer(n):i;if(this.isCIDPatch()&&!s)return;let r=t.getActiveElement(),{selectionStart:o,selectionEnd:a}=r&&y.hasSelectionRange(r)?r:{},u=t.binding(yn),d=t.binding(vn),v=t.binding(bn),w=t.binding(Jo),g=t.binding("remove"),p=[],C=[],A=[],P=[],N=null,M=t.time("premorph container prep",()=>this.buildDiffHTML(i,n,u,s));return this.trackBefore("added",i),this.trackBefore("updated",i,i),t.time("morphdom",()=>{Us(s,M,{childrenOnly:s.getAttribute(_e)===null,getNodeKey:b=>y.isPhxDestroyed(b)?null:b.id,onBeforeNodeAdded:b=>(this.trackBefore("added",b),b),onNodeAdded:b=>{b instanceof HTMLImageElement&&b.srcset?b.srcset=b.srcset:b instanceof HTMLVideoElement&&b.autoplay&&b.play(),y.isNowTriggerFormExternal(b,w)&&(N=b),y.discardError(s,b,d),(y.isPhxChild(b)&&e.ownsElement(b)||y.isPhxSticky(b)&&e.ownsElement(b.parentNode))&&this.trackAfter("phxChildAdded",b),p.push(b)},onNodeDiscarded:b=>{(y.isPhxChild(b)||y.isPhxSticky(b))&&t.destroyViewByEl(b),this.trackAfter("discarded",b)},onBeforeNodeDiscarded:b=>b.getAttribute&&b.getAttribute(Ss)!==null?!0:b.parentNode!==null&&y.isPhxUpdate(b.parentNode,u,["append","prepend"])&&b.id?!1:b.getAttribute&&b.getAttribute(g)?(P.push(b),!1):!this.skipCIDSibling(b),onElUpdated:b=>{y.isNowTriggerFormExternal(b,w)&&(N=b),C.push(b)},onBeforeElUpdated:(b,_)=>{if(y.cleanChildNodes(_,u),this.skipCIDSibling(_)||y.isPhxSticky(b))return!1;if(y.isIgnored(b,u)||b.form&&b.form.isSameNode(N))return this.trackBefore("updated",b,_),y.mergeAttrs(b,_,{isIgnored:!0}),C.push(b),y.applyStickyOperations(b),!1;if(b.type==="number"&&b.validity&&b.validity.badInput)return!1;if(!y.syncPendingRef(b,_,v))return y.isUploadInput(b)&&(this.trackBefore("updated",b,_),C.push(b)),y.applyStickyOperations(b),!1;if(y.isPhxChild(_)){let Y=b.getAttribute(ut);return y.mergeAttrs(b,_,{exclude:[ni]}),Y!==""&&b.setAttribute(ut,Y),b.setAttribute(ri,this.rootID),y.applyStickyOperations(b),!1}return y.copyPrivates(_,b),y.discardError(s,_,d),r&&b.isSameNode(r)&&y.isFormInput(b)?(this.trackBefore("updated",b,_),y.mergeFocusedInput(b,_),y.syncAttrsToProps(b),C.push(b),y.applyStickyOperations(b),!1):(y.isPhxUpdate(_,u,["append","prepend"])&&A.push(new ul(b,_,_.getAttribute(u))),y.syncAttrsToProps(_),y.applyStickyOperations(_),this.trackBefore("updated",b,_),!0)}})}),t.isDebugEnabled()&&nl(),A.length>0&&t.time("post-morph append/prepend restoration",()=>{A.forEach(b=>b.perform())}),t.silenceEvents(()=>y.restoreFocus(r,o,a)),y.dispatchEvent(document,"phx:update"),p.forEach(b=>this.trackAfter("added",b)),C.forEach(b=>this.trackAfter("updated",b)),P.length>0&&(t.transitionRemoves(P),t.requestDOMUpdate(()=>{P.forEach(b=>{let _=y.firstPhxChild(b);_&&t.destroyViewByEl(_),b.remove()}),this.trackAfter("transitionsDiscarded",P)})),N&&(t.disconnect(),N.submit()),!0}isCIDPatch(){return this.cidPatch}skipCIDSibling(e){return e.nodeType===Node.ELEMENT_NODE&&e.getAttribute(mn)!==null}targetCIDContainer(e){if(!this.isCIDPatch())return;let[t,...i]=y.findComponentNodeList(this.container,this.targetCID);return i.length===0&&y.childNodeLength(e)===1?t:t&&t.parentNode}buildDiffHTML(e,t,i,n){let s=this.isCIDPatch(),r=s&&n.getAttribute(_e)===this.targetCID.toString();if(!s||r)return t;{let o=null,a=document.createElement("template");o=y.cloneNode(n);let[u,...d]=y.findComponentNodeList(o,this.targetCID);return a.innerHTML=t,d.forEach(v=>v.remove()),Array.from(o.childNodes).forEach(v=>{v.id&&v.nodeType===Node.ELEMENT_NODE&&v.getAttribute(_e)!==this.targetCID.toString()&&(v.setAttribute(mn,""),v.innerHTML="")}),Array.from(a.content.childNodes).forEach(v=>o.insertBefore(v,u)),u.remove(),o.outerHTML}}},$s=class{static extract(e){let{[Ls]:t,[Ds]:i,[Is]:n}=e;return delete e[Ls],delete e[Ds],delete e[Is],{diff:e,title:n,reply:t||null,events:i||[]}}constructor(e,t){this.viewId=e,this.rendered={},this.mergeDiff(t)}parentViewId(){return this.viewId}toString(e){return this.recursiveToString(this.rendered,this.rendered[Te],e)}recursiveToString(e,t=e[Te],i){i=i?new Set(i):null;let n={buffer:"",components:t,onlyCids:i};return this.toOutputBuffer(e,null,n),n.buffer}componentCIDs(e){return Object.keys(e[Te]||{}).map(t=>parseInt(t))}isComponentOnlyDiff(e){return e[Te]?Object.keys(e).length===1:!1}getComponent(e,t){return e[Te][t]}mergeDiff(e){let t=e[Te],i={};if(delete e[Te],this.rendered=this.mutableMerge(this.rendered,e),this.rendered[Te]=this.rendered[Te]||{},t){let n=this.rendered[Te];for(let s in t)t[s]=this.cachedFindComponent(s,t[s],n,t,i);for(let s in t)n[s]=t[s];e[Te]=t}}cachedFindComponent(e,t,i,n,s){if(s[e])return s[e];{let r,o,a=t[Je];if(ct(a)){let u;a>0?u=this.cachedFindComponent(a,n[a],i,n,s):u=i[-a],o=u[Je],r=this.cloneMerge(u,t),r[Je]=o}else r=t[Je]!==void 0?t:this.cloneMerge(i[e]||{},t);return s[e]=r,r}}mutableMerge(e,t){return t[Je]!==void 0?t:(this.doMutableMerge(e,t),e)}doMutableMerge(e,t){for(let i in t){let n=t[i],s=e[i];ei(n)&&n[Je]===void 0&&ei(s)?this.doMutableMerge(s,n):e[i]=n}}cloneMerge(e,t){let i={...e,...t};for(let n in i){let s=t[n],r=e[n];ei(s)&&s[Je]===void 0&&ei(r)&&(i[n]=this.cloneMerge(r,s))}return i}componentToString(e){return this.recursiveCIDToString(this.rendered[Te],e)}pruneCIDs(e){e.forEach(t=>delete this.rendered[Te][t])}get(){return this.rendered}isNewFingerprint(e={}){return!!e[Je]}templateStatic(e,t){return typeof e=="number"?t[e]:e}toOutputBuffer(e,t,i){if(e[Rs])return this.comprehensionToBuffer(e,t,i);let{[Je]:n}=e;n=this.templateStatic(n,t),i.buffer+=n[0];for(let s=1;s<n.length;s++)this.dynamicToBuffer(e[s-1],t,i),i.buffer+=n[s]}comprehensionToBuffer(e,t,i){let{[Rs]:n,[Je]:s}=e;s=this.templateStatic(s,t);let r=t||e[tl];for(let o=0;o<n.length;o++){let a=n[o];i.buffer+=s[0];for(let u=1;u<s.length;u++)this.dynamicToBuffer(a[u-1],r,i),i.buffer+=s[u]}}dynamicToBuffer(e,t,i){typeof e=="number"?i.buffer+=this.recursiveCIDToString(i.components,e,i.onlyCids):ei(e)?this.toOutputBuffer(e,t,i):i.buffer+=e}recursiveCIDToString(e,t,i){let n=e[t]||me(`no component for CID ${t}`,e),s=document.createElement("template");s.innerHTML=this.recursiveToString(n,e,i);let r=s.content,o=i&&!i.has(t),[a,u]=Array.from(r.childNodes).reduce(([d,v],w,g)=>w.nodeType===Node.ELEMENT_NODE?w.getAttribute(_e)?[d,!0]:(w.setAttribute(_e,t),w.id||(w.id=`${this.parentViewId()}-${t}-${g}`),o&&(w.setAttribute(mn,""),w.innerHTML=""),[!0,v]):w.nodeValue.trim()!==""?(me(`only HTML element tags are allowed at the root of components.

got: "${w.nodeValue.trim()}"

within:
`,s.innerHTML.trim()),w.replaceWith(this.createSpan(w.nodeValue,t)),[!0,v]):(w.remove(),[d,v]),[!1,!1]);return!a&&!u?(me(`expected at least one HTML element tag inside a component, but the component is empty:
`,s.innerHTML.trim()),this.createSpan("",t).outerHTML):(!a&&u&&me("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.",s.innerHTML.trim()),s.innerHTML)}createSpan(e,t){let i=document.createElement("span");return i.innerText=e,i.setAttribute(_e,t),i}},El=1,ii=class{static makeID(){return El++}static elementID(e){return e.phxHookId}constructor(e,t,i){this.__view=e,this.liveSocket=e.liveSocket,this.__callbacks=i,this.__listeners=new Set,this.__isDisconnected=!1,this.el=t,this.el.phxHookId=this.constructor.makeID();for(let n in this.__callbacks)this[n]=this.__callbacks[n]}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed()}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}pushEvent(e,t={},i=function(){}){return this.__view.pushHookEvent(null,e,t,i)}pushEventTo(e,t,i={},n=function(){}){return this.__view.withinTargets(e,(s,r)=>s.pushHookEvent(r,t,i,n))}handleEvent(e,t){let i=(n,s)=>s?e:t(n.detail);return window.addEventListener(`phx:${e}`,i),this.__listeners.add(i),i}removeHandleEvent(e){let t=e(null,!0);window.removeEventListener(`phx:${t}`,e),this.__listeners.delete(e)}upload(e,t){return this.__view.dispatchUploads(e,t)}uploadTo(e,t,i){return this.__view.withinTargets(e,n=>n.dispatchUploads(t,i))}__cleanup__(){this.__listeners.forEach(e=>this.removeHandleEvent(e))}},Pi=null,Tl={exec(e,t,i,n,s){let[r,o]=s||[null,{}];(t.charAt(0)==="["?JSON.parse(t):[[r,o]]).forEach(([u,d])=>{u===r&&o.data&&(d.data=Object.assign(d.data||{},o.data)),this.filterToEls(n,d).forEach(v=>{this[`exec_${u}`](e,t,i,n,v,d)})})},isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length>0)},exec_dispatch(e,t,i,n,s,{to:r,event:o,detail:a,bubbles:u}){a=a||{},a.dispatcher=n,y.dispatchEvent(s,o,{detail:a,bubbles:u})},exec_push(e,t,i,n,s,r){if(!i.isConnected())return;let{event:o,data:a,target:u,page_loading:d,loading:v,value:w,dispatcher:g}=r,p={loading:v,value:w,target:u,page_loading:!!d},C=e==="change"&&g?g:n,A=u||C.getAttribute(i.binding("target"))||C;i.withinTargets(A,(P,N)=>{if(e==="change"){let{newCid:M,_target:b,callback:_}=r;b=b||(n instanceof HTMLInputElement?n.name:void 0),b&&(p._target=b),P.pushInput(n,N,M,o||t,p,_)}else e==="submit"?P.submitForm(n,N,o||t,p):P.pushEvent(e,n,N,o||t,a,p)})},exec_navigate(e,t,i,n,s,{href:r,replace:o}){i.liveSocket.historyRedirect(r,o?"replace":"push")},exec_patch(e,t,i,n,s,{href:r,replace:o}){i.liveSocket.pushHistoryPatch(r,o?"replace":"push",n)},exec_focus(e,t,i,n,s){window.requestAnimationFrame(()=>Ht.attemptFocus(s))},exec_focus_first(e,t,i,n,s){window.requestAnimationFrame(()=>Ht.focusFirstInteractive(s)||Ht.focusFirst(s))},exec_push_focus(e,t,i,n,s){window.requestAnimationFrame(()=>Pi=s||n)},exec_pop_focus(e,t,i,n,s){window.requestAnimationFrame(()=>{Pi&&Pi.focus(),Pi=null})},exec_add_class(e,t,i,n,s,{names:r,transition:o,time:a}){this.addOrRemoveClasses(s,r,[],o,a,i)},exec_remove_class(e,t,i,n,s,{names:r,transition:o,time:a}){this.addOrRemoveClasses(s,[],r,o,a,i)},exec_transition(e,t,i,n,s,{time:r,transition:o}){let[a,u,d]=o,v=()=>this.addOrRemoveClasses(s,a.concat(u),[]),w=()=>this.addOrRemoveClasses(s,d,a.concat(u));i.transition(r,v,w)},exec_toggle(e,t,i,n,s,{display:r,ins:o,outs:a,time:u}){this.toggle(e,i,s,r,o,a,u)},exec_show(e,t,i,n,s,{display:r,transition:o,time:a}){this.show(e,i,s,r,o,a)},exec_hide(e,t,i,n,s,{display:r,transition:o,time:a}){this.hide(e,i,s,r,o,a)},exec_set_attr(e,t,i,n,s,{attr:[r,o]}){this.setOrRemoveAttrs(s,[[r,o]],[])},exec_remove_attr(e,t,i,n,s,{attr:r}){this.setOrRemoveAttrs(s,[],[r])},show(e,t,i,n,s,r){this.isVisible(i)||this.toggle(e,t,i,n,s,null,r)},hide(e,t,i,n,s,r){this.isVisible(i)&&this.toggle(e,t,i,n,null,s,r)},toggle(e,t,i,n,s,r,o){let[a,u,d]=s||[[],[],[]],[v,w,g]=r||[[],[],[]];if(a.length>0||v.length>0)if(this.isVisible(i)){let p=()=>{this.addOrRemoveClasses(i,w,a.concat(u).concat(d)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,v,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,g,w))})};i.dispatchEvent(new Event("phx:hide-start")),t.transition(o,p,()=>{this.addOrRemoveClasses(i,[],v.concat(g)),y.putSticky(i,"toggle",C=>C.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))})}else{if(e==="remove")return;let p=()=>{this.addOrRemoveClasses(i,u,v.concat(w).concat(g)),y.putSticky(i,"toggle",C=>C.style.display=n||"block"),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,a,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,d,u))})};i.dispatchEvent(new Event("phx:show-start")),t.transition(o,p,()=>{this.addOrRemoveClasses(i,[],a.concat(d)),i.dispatchEvent(new Event("phx:show-end"))})}else this.isVisible(i)?window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:hide-start")),y.putSticky(i,"toggle",p=>p.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:show-start")),y.putSticky(i,"toggle",p=>p.style.display=n||"block"),i.dispatchEvent(new Event("phx:show-end"))})},addOrRemoveClasses(e,t,i,n,s,r){let[o,a,u]=n||[[],[],[]];if(o.length>0){let d=()=>this.addOrRemoveClasses(e,a.concat(o),[]),v=()=>this.addOrRemoveClasses(e,t.concat(u),i.concat(o).concat(a));return r.transition(s,d,v)}window.requestAnimationFrame(()=>{let[d,v]=y.getSticky(e,"classes",[[],[]]),w=t.filter(A=>d.indexOf(A)<0&&!e.classList.contains(A)),g=i.filter(A=>v.indexOf(A)<0&&e.classList.contains(A)),p=d.filter(A=>i.indexOf(A)<0).concat(w),C=v.filter(A=>t.indexOf(A)<0).concat(g);y.putSticky(e,"classes",A=>(A.classList.remove(...C),A.classList.add(...p),[p,C]))})},setOrRemoveAttrs(e,t,i){let[n,s]=y.getSticky(e,"attrs",[[],[]]),r=t.map(([u,d])=>u).concat(i),o=n.filter(([u,d])=>!r.includes(u)).concat(t),a=s.filter(u=>!r.includes(u)).concat(i);y.putSticky(e,"attrs",u=>(a.forEach(d=>u.removeAttribute(d)),o.forEach(([d,v])=>u.setAttribute(d,v)),[o,a]))},hasAllClasses(e,t){return t.every(i=>e.classList.contains(i))},isToggledOut(e,t){return!this.isVisible(e)||this.hasAllClasses(e,t)},filterToEls(e,{to:t}){return t?y.all(document,t):[e]}},ze=Tl,Ri=(e,t,i=[])=>{let n=new FormData(e),s=[];n.forEach((o,a,u)=>{o instanceof File&&s.push(a)}),s.forEach(o=>n.delete(o));let r=new URLSearchParams;for(let[o,a]of n.entries())(i.length===0||i.indexOf(o)>=0)&&r.append(o,a);for(let o in t)r.append(o,t[o]);return r.toString()},Xs=class{constructor(e,t,i,n,s){this.isDead=!1,this.liveSocket=t,this.flash=n,this.parent=i,this.root=i?i.root:this,this.el=e,this.id=this.el.id,this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pruningCIDs=[],this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(r){r&&r()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.uploaders={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>({redirect:this.redirect?this.href:void 0,url:this.redirect?void 0:this.href||void 0,params:this.connectParams(s),session:this.getSession(),static:this.getStatic(),flash:this.flash})),this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel()}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.getAttribute(Sn)!==null}connectParams(e){let t=this.liveSocket.params(this.el),i=y.all(document,`[${this.binding(jo)}]`).map(n=>n.src||n.href).filter(n=>typeof n=="string");return i.length>0&&(t._track_static=i),t._mounts=this.joinCount,t._live_referer=e,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(ut)}getStatic(){let e=this.el.getAttribute(ni);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let i in this.viewHooks)this.destroyHook(this.viewHooks[i])};y.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(Cs,an,xs),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(an)}}execAll(e){y.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(Cs),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,i=function(){}){this.liveSocket.transition(e,t,i)}withinTargets(e,t){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,i=>t(i,e));if(ct(e))y.findComponentNodeList(this.el,e).length===0?me(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let i=Array.from(document.querySelectorAll(e));i.length===0&&me(`nothing found matching the phx-target selector "${e}"`),i.forEach(n=>this.liveSocket.owner(n,s=>t(s,n)))}}applyDiff(e,t,i){this.log(e,()=>["",Li(t)]);let{diff:n,reply:s,events:r,title:o}=$s.extract(t);o&&y.putTitle(o),i({diff:n,reply:s,events:r})}onJoin(e){let{rendered:t,container:i}=e;if(i){let[n,s]=i;this.el=y.replaceRootContainer(this.el,n,s)}this.childJoins=0,this.joinPending=!0,this.flash=null,We.dropLocal(this.liveSocket.localStorage,window.location.pathname,js),this.applyDiff("mount",t,({diff:n,events:s})=>{this.rendered=new $s(this.id,n);let r=this.renderContainer(null,"join");this.dropPendingRefs();let o=this.formsForRecovery(r);this.joinCount++,o.length>0?o.forEach(([a,u,d],v)=>{this.pushFormRecovery(a,d,w=>{v===o.length-1&&this.onJoinComplete(w,r,s)})}):this.onJoinComplete(e,r,s)})}dropPendingRefs(){y.all(document,`[${wt}="${this.id}"][${Ye}]`,e=>{e.removeAttribute(Ye),e.removeAttribute(wt)})}onJoinComplete({live_patch:e},t,i){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,i);y.findPhxChildrenInFragment(t,this.id).filter(s=>{let r=s.id&&this.el.querySelector(`[id="${s.id}"]`),o=r&&r.getAttribute(ni);return o&&s.setAttribute(ni,o),this.joinChild(s)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,i)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i)])}attachTrueDocEl(){this.el=y.byId(this.id),this.el.setAttribute(ri,this.root.id)}execNewMounted(){y.all(this.el,`[${this.binding(Qt)}], [data-phx-${Qt}]`,e=>{this.maybeAddNewHook(e)}),y.all(this.el,`[${this.binding(_s)}]`,e=>this.maybeMounted(e))}applyJoinPatch(e,t,i){this.attachTrueDocEl();let n=new _i(this,this.el,this.id,t,null);if(n.markPrunableContentForRemoval(),this.performPatch(n,!1),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(i),this.applyPendingUpdates(),e){let{kind:s,to:r}=e;this.liveSocket.historyPatch(r,s)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let i=this.getHook(e),n=i&&y.isIgnored(e,this.binding(yn));if(i&&!e.isEqualNode(t)&&!(n&&rl(e.dataset,t.dataset)))return i.__beforeUpdate(),i}maybeMounted(e){let t=e.getAttribute(this.binding(_s)),i=t&&y.private(e,"mounted");t&&!i&&(this.liveSocket.execJS(e,t),y.putPrivate(e,"mounted",!0))}maybeAddNewHook(e,t){let i=this.addHook(e);i&&i.__mounted()}performPatch(e,t){let i=[],n=!1,s=new Set;return e.after("added",r=>{this.liveSocket.triggerDOM("onNodeAdded",[r]),this.maybeAddNewHook(r),r.getAttribute&&this.maybeMounted(r)}),e.after("phxChildAdded",r=>{y.isPhxSticky(r)?this.liveSocket.joinRootViews():n=!0}),e.before("updated",(r,o)=>{this.triggerBeforeUpdateHook(r,o)&&s.add(r.id)}),e.after("updated",r=>{s.has(r.id)&&this.getHook(r).__updated()}),e.after("discarded",r=>{r.nodeType===Node.ELEMENT_NODE&&i.push(r)}),e.after("transitionsDiscarded",r=>this.afterElementsRemoved(r,t)),e.perform(),this.afterElementsRemoved(i,t),n}afterElementsRemoved(e,t){let i=[];e.forEach(n=>{let s=y.all(n,`[${_e}]`),r=y.all(n,`[${this.binding(Qt)}]`);s.concat(n).forEach(o=>{let a=this.componentID(o);ct(a)&&i.indexOf(a)===-1&&i.push(a)}),r.concat(n).forEach(o=>{let a=this.getHook(o);a&&this.destroyHook(a)})}),t&&this.maybePushComponentsDestroyed(i)}joinNewChildren(){y.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(Ot)][e.id]}destroyDescendent(e){for(let t in this.root.children)for(let i in this.root.children[t])if(i===e)return this.root.children[t][i].destroy()}joinChild(e){if(!this.getChildById(e.id)){let i=new Xs(e,this.liveSocket,this);return this.root.children[this.id][i.id]=i,i.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{y.findParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(i=!0)})}):Ms(e)||this.liveSocket.time("full patch complete",()=>{let n=this.renderContainer(e,"update"),s=new _i(this,this.el,this.id,n,null);i=this.performPatch(s,!0)}),this.liveSocket.dispatchEvents(t),i&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let i=this.el.tagName,n=e?this.rendered.componentCIDs(e).concat(this.pruningCIDs):null,s=this.rendered.toString(n);return`<${i}>${s}</${i}>`})}componentPatch(e,t){if(Ms(e))return!1;let i=this.rendered.componentToString(t),n=new _i(this,this.el,this.id,i,t);return this.performPatch(n,!0)}getHook(e){return this.viewHooks[ii.elementID(e)]}addHook(e){if(ii.elementID(e)||!e.getAttribute)return;let t=e.getAttribute(`data-phx-${Qt}`)||e.getAttribute(this.binding(Qt));if(t&&!this.ownsElement(e))return;let i=this.liveSocket.getHookCallbacks(t);if(i){e.id||me(`no DOM ID for hook "${t}". Hooks require a unique ID on each element.`,e);let n=new ii(this,e,i);return this.viewHooks[ii.elementID(n.el)]=n,n}else t!==null&&me(`unknown hook found for "${t}"`,e)}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[ii.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[]}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,i=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(i)]):this.liveSocket.requestDOMUpdate(()=>t(i))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:i})=>this.update(t,i))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){for(let e in this.root.children[this.id])this.getChildById(e).destroy()}onLiveRedirect(e){let{to:t,kind:i,flash:n}=e,s=this.expandURL(t);this.liveSocket.historyRedirect(s,i,n)}onLivePatch(e){let{to:t,kind:i}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,i)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t}){this.liveSocket.redirect(e,t)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}join(e){this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.liveSocket.wrapPush(this,{timeout:!1},()=>this.channel.join().receive("ok",t=>{this.isDestroyed()||this.liveSocket.requestDOMUpdate(()=>this.onJoin(t))}).receive("error",t=>!this.isDestroyed()&&this.onJoinError(t)).receive("timeout",()=>!this.isDestroyed()&&this.onJoinError({reason:"timeout"})))}onJoinError(e){if(e.reason==="unauthorized"||e.reason==="stale")return this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.href});if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);this.log("error",()=>["unable to join",e]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this)}onClose(e){if(!this.isDestroyed()){if(this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(Go)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||this.displayError()}displayError(){this.isMain()&&y.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(an,xs),this.execAll(this.binding("disconnected"))}pushWithReply(e,t,i,n=function(){}){if(!this.isConnected())return;let[s,[r],o]=e?e():[null,[],{}],a=function(){};return(o.page_loading||r&&r.getAttribute(this.binding(ks))!==null)&&(a=this.liveSocket.withPageLoading({kind:"element",target:r})),typeof i.cid!="number"&&delete i.cid,this.liveSocket.wrapPush(this,{timeout:!0},()=>this.channel.push(t,i,Zo).receive("ok",u=>{let d=v=>{u.redirect&&this.onRedirect(u.redirect),u.live_patch&&this.onLivePatch(u.live_patch),u.live_redirect&&this.onLiveRedirect(u.live_redirect),s!==null&&this.undoRefs(s),a(),n(u,v)};u.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",u.diff,({diff:v,reply:w,events:g})=>{this.update(v,g),d(w)})}):d(null)}))}undoRefs(e){!this.isConnected()||y.all(document,`[${wt}="${this.id}"][${Ye}="${e}"]`,t=>{let i=t.getAttribute(ki);t.removeAttribute(Ye),t.removeAttribute(wt),t.getAttribute(hn)!==null&&(t.readOnly=!1,t.removeAttribute(hn)),i!==null&&(t.disabled=i==="true",t.removeAttribute(ki)),Bs.forEach(r=>y.removeClass(t,r));let n=t.getAttribute(Ci);n!==null&&(t.innerText=n,t.removeAttribute(Ci));let s=y.private(t,Ye);if(s){let r=this.triggerBeforeUpdateHook(t,s);_i.patchEl(t,s,this.liveSocket.getActiveElement()),r&&r.__updated(),y.deletePrivate(t,Ye)}})}putRef(e,t,i={}){let n=this.ref++,s=this.binding(bn);return i.loading&&(e=e.concat(y.all(document,i.loading))),e.forEach(r=>{r.classList.add(`phx-${t}-loading`),r.setAttribute(Ye,n),r.setAttribute(wt,this.el.id);let o=r.getAttribute(s);o!==null&&(r.getAttribute(Ci)||r.setAttribute(Ci,r.innerText),o!==""&&(r.innerText=o),r.setAttribute("disabled",""))}),[n,e,i]}componentID(e){let t=e.getAttribute&&e.getAttribute(_e);return t?parseInt(t):null}targetComponentID(e,t,i={}){if(ct(t))return t;let n=e.getAttribute(this.binding("target"));return ct(n)?parseInt(n):t&&(n!==null||i.target)?this.closestComponentID(t):null}closestComponentID(e){return ct(e)?e:e?Ze(e.closest(`[${_e}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,i,n){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",t,i]),!1;let[s,r,o]=this.putRef([],"hook");return this.pushWithReply(()=>[s,r,o],"event",{type:"hook",event:t,value:i,cid:this.closestComponentID(e)},(a,u)=>n(u,s)),s}extractMeta(e,t,i){let n=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let r=e.attributes[s].name;r.startsWith(n)&&(t[r.replace(n,"")]=e.getAttribute(r))}if(e.value!==void 0&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&Ws.indexOf(e.type)>=0&&!e.checked&&delete t.value),i){t||(t={});for(let s in i)t[s]=i[s]}return t}pushEvent(e,t,i,n,s,r={}){this.pushWithReply(()=>this.putRef([t],e,r),"event",{type:e,event:n,value:this.extractMeta(t,s,r.value),cid:this.targetComponentID(t,i,r)})}pushFileProgress(e,t,i,n=function(){}){this.liveSocket.withinOwners(e.form,(s,r)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(qo)),ref:e.getAttribute(St),entry_ref:t,progress:i,cid:s.targetComponentID(e.form,r)},n)})}pushInput(e,t,i,n,s,r){let o,a=ct(i)?i:this.targetComponentID(e.form,t),u=()=>this.putRef([e,e.form],"change",s),d;e.getAttribute(this.binding("change"))?d=Ri(e.form,{_target:s._target},[e.name]):d=Ri(e.form,{_target:s._target}),y.isUploadInput(e)&&e.files&&e.files.length>0&&ge.trackFiles(e,Array.from(e.files)),o=ge.serializeUploads(e);let v={type:"form",event:n,value:d,uploads:o,cid:a};this.pushWithReply(u,"event",v,w=>{if(y.showError(e,this.liveSocket.binding(vn)),y.isUploadInput(e)&&e.getAttribute("data-phx-auto-upload")!==null){if(ge.filesAwaitingPreflight(e).length>0){let[g,p]=u();this.uploadFiles(e.form,t,g,a,C=>{r&&r(w),this.triggerAwaitingSubmit(e.form)})}}else r&&r(w)})}triggerAwaitingSubmit(e){let t=this.getScheduledSubmit(e);if(t){let[i,n,s,r]=t;this.cancelSubmit(e),r()}}getScheduledSubmit(e){return this.formSubmits.find(([t,i,n,s])=>t.isSameNode(e))}scheduleSubmit(e,t,i,n){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,i,n])}cancelSubmit(e){this.formSubmits=this.formSubmits.filter(([t,i,n])=>t.isSameNode(e)?(this.undoRefs(i),!1):!0)}disableForm(e,t={}){let i=v=>!(si(v,`${this.binding(yn)}=ignore`,v.form)||si(v,"data-phx-update=ignore",v.form)),n=v=>v.hasAttribute(this.binding(bn)),s=v=>v.tagName=="BUTTON",r=v=>["INPUT","TEXTAREA","SELECT"].includes(v.tagName),o=Array.from(e.elements),a=o.filter(n),u=o.filter(s).filter(i),d=o.filter(r).filter(i);return u.forEach(v=>{v.setAttribute(ki,v.disabled),v.disabled=!0}),d.forEach(v=>{v.setAttribute(hn,v.readOnly),v.readOnly=!0,v.files&&(v.setAttribute(ki,v.disabled),v.disabled=!0)}),e.setAttribute(this.binding(ks),""),this.putRef([e].concat(a).concat(u).concat(d),"submit",t)}pushFormSubmit(e,t,i,n,s){let r=()=>this.disableForm(e,n),o=this.targetComponentID(e,t);if(ge.hasUploadsInProgress(e)){let[a,u]=r(),d=()=>this.pushFormSubmit(e,t,i,n,s);return this.scheduleSubmit(e,a,n,d)}else if(ge.inputsAwaitingPreflight(e).length>0){let[a,u]=r(),d=()=>[a,u,n];this.uploadFiles(e,t,a,o,v=>{let w=Ri(e,{});this.pushWithReply(d,"event",{type:"form",event:i,value:w,cid:o},s)})}else{let a=Ri(e,{});this.pushWithReply(r,"event",{type:"form",event:i,value:a,cid:o},s)}}uploadFiles(e,t,i,n,s){let r=this.joinCount,o=ge.activeFileInputs(e),a=o.length;o.forEach(u=>{let d=new ge(u,this,()=>{a--,a===0&&s()});this.uploaders[u]=d;let v=d.entries().map(g=>g.toPreflightPayload()),w={ref:u.getAttribute(St),entries:v,cid:this.targetComponentID(u.form,t)};this.log("upload",()=>["sending preflight request",w]),this.pushWithReply(null,"allow_upload",w,g=>{if(this.log("upload",()=>["got preflight response",g]),g.error){this.undoRefs(i);let[p,C]=g.error;this.log("upload",()=>[`error for entry ${p}`,C])}else{let p=C=>{this.channel.onError(()=>{this.joinCount===r&&C()})};d.initAdapterUpload(g,p,this.liveSocket)}})})}dispatchUploads(e,t){let i=y.findUploadInputs(this.el).filter(n=>n.name===e);i.length===0?me(`no live file inputs found matching the name "${e}"`):i.length>1?me(`duplicate live file inputs found matching the name "${e}"`):y.dispatchEvent(i[0],Vs,{detail:{files:t}})}pushFormRecovery(e,t,i){this.liveSocket.withinOwners(e,(n,s)=>{let r=e.elements[0],o=e.getAttribute(this.binding(Ts))||e.getAttribute(this.binding("change"));ze.exec("change",o,n,r,["push",{_target:r.name,newCid:t,callback:i}])})}pushLinkPatch(e,t,i){let n=this.liveSocket.setPendingLink(e),s=t?()=>this.putRef([t],"click"):null,r=()=>this.liveSocket.redirect(window.location.href),o=this.pushWithReply(s,"live_patch",{url:e},a=>{this.liveSocket.requestDOMUpdate(()=>{a.link_redirect?this.liveSocket.replaceMain(e,null,i,n):(this.liveSocket.commitPendingLink(n)&&(this.href=e),this.applyPendingUpdates(),i&&i(n))})});o?o.receive("timeout",r):r()}formsForRecovery(e){if(this.joinCount===0)return[];let t=this.binding("change"),i=document.createElement("template");return i.innerHTML=e,y.all(this.el,`form[${t}]`).filter(n=>n.id&&this.ownsElement(n)).filter(n=>n.elements.length>0).filter(n=>n.getAttribute(this.binding(Ts))!=="ignore").map(n=>{let s=i.content.querySelector(`form[id="${n.id}"][${t}="${n.getAttribute(t)}"]`);return s?[n,s,this.targetComponentID(s)]:[n,null,null]}).filter(([n,s,r])=>s)}maybePushComponentsDestroyed(e){let t=e.filter(i=>y.findComponentNodeList(this.el,i).length===0);t.length>0&&(this.pruningCIDs.push(...t),this.pushWithReply(null,"cids_will_destroy",{cids:t},()=>{this.pruningCIDs=this.pruningCIDs.filter(n=>t.indexOf(n)!==-1);let i=t.filter(n=>y.findComponentNodeList(this.el,n).length===0);i.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:i},n=>{this.rendered.pruneCIDs(n.cids)})}))}ownsElement(e){return this.isDead||e.getAttribute(Ot)===this.id||Ze(e.closest(Nt),t=>t.id)===this.id}submitForm(e,t,i,n={}){y.putPrivate(e,zs,!0);let s=this.liveSocket.binding(vn),r=Array.from(e.elements);this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,i,n,()=>{r.forEach(o=>y.showError(o,s)),this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}},qs=class{constructor(e,t,i={}){if(this.unloaded=!1,!t||t.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new t(e,i),this.bindingPrefix=i.bindingPrefix||Qo,this.opts=i,this.params=dn(i.params||{}),this.viewLogger=i.viewLogger,this.metadataCallbacks=i.metadata||{},this.defaults=Object.assign(Li(el),i.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=Li(window.location),this.hooks=i.hooks||{},this.uploaders=i.uploaders||{},this.loaderTimeout=i.loaderTimeout||Ko,this.reloadWithJitterTimer=null,this.maxReloads=i.maxReloads||No,this.reloadJitterMin=i.reloadJitterMin||Fo,this.reloadJitterMax=i.reloadJitterMax||Uo,this.failsafeJitter=i.failsafeJitter||$o,this.localStorage=i.localStorage||window.localStorage,this.sessionStorage=i.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.domCallbacks=Object.assign({onNodeAdded:dn(),onBeforeElUpdated:dn()},i.dom||{}),this.transitions=new _l,window.addEventListener("pagehide",n=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}isProfileEnabled(){return this.sessionStorage.getItem(cn)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(Ai)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(Ai)==="false"}enableDebug(){this.sessionStorage.setItem(Ai,"true")}enableProfiling(){this.sessionStorage.setItem(cn,"true")}disableDebug(){this.sessionStorage.setItem(Ai,"false")}disableProfiling(){this.sessionStorage.removeItem(cn)}enableLatencySim(e){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(un,e)}disableLatencySim(){this.sessionStorage.removeItem(un)}getLatencySim(){let e=this.sessionStorage.getItem(un);return e?parseInt(e):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let e=()=>{this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?e():document.addEventListener("DOMContentLoaded",()=>e())}disconnect(e){clearTimeout(this.reloadWithJitterTimer),this.socket.disconnect(e)}replaceTransport(e){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(e),this.connect()}execJS(e,t,i=null){this.owner(e,n=>ze.exec(i,t,n,e))}triggerDOM(e,t){this.domCallbacks[e](...t)}time(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);let i=t();return console.timeEnd(e),i}log(e,t,i){if(this.viewLogger){let[n,s]=i();this.viewLogger(e,t,n,s)}else if(this.isDebugEnabled()){let[n,s]=i();sl(e,t,n,s)}}requestDOMUpdate(e){this.transitions.after(e)}transition(e,t,i=function(){}){this.transitions.addTransition(e,t,i)}onChannel(e,t,i){e.on(t,n=>{let s=this.getLatencySim();s?setTimeout(()=>i(n),s):i(n)})}wrapPush(e,t,i){let n=this.getLatencySim(),s=e.joinCount;if(!n)return this.isConnected()&&t.timeout?i().receive("timeout",()=>{e.joinCount===s&&!e.isDestroyed()&&this.reloadWithJitter(e,()=>{this.log(e,"timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}):i();let r={receives:[],receive(o,a){this.receives.push([o,a])}};return setTimeout(()=>{e.isDestroyed()||r.receives.reduce((o,[a,u])=>o.receive(a,u),i())},n),r}reloadWithJitter(e,t){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let i=this.reloadJitterMin,n=this.reloadJitterMax,s=Math.floor(Math.random()*(n-i+1))+i,r=We.updateLocal(this.localStorage,window.location.pathname,js,0,o=>o+1);r>this.maxReloads&&(s=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{e.isDestroyed()||e.isConnected()||(e.destroy(),t?t():this.log(e,"join",()=>[`encountered ${r} consecutive reloads`]),r>this.maxReloads&&this.log(e,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},s)}getHookCallbacks(e){return e&&e.startsWith("Phoenix.")?cl[e.split(".")[1]]:this.hooks[e]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(e){return`${this.getBindingPrefix()}${e}`}channel(e,t){return this.socket.channel(e,t)}joinDeadView(){this.bindTopLevelEvents({dead:!0});let e=this.newRootView(document.body);e.setHref(this.getHref()),e.joinDead(),this.main=e,window.requestAnimationFrame(()=>e.execNewMounted())}joinRootViews(){let e=!1;return y.all(document,`${Nt}:not([${Ot}])`,t=>{if(!this.getRootById(t.id)){let i=this.newRootView(t);i.setHref(this.getHref()),i.join(),t.getAttribute(Sn)&&(this.main=i)}e=!0}),e}redirect(e,t){this.disconnect(),We.redirect(e,t)}replaceMain(e,t,i=null,n=this.setPendingLink(e)){let s=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let r=y.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(r,t,s),this.main.setRedirect(e),this.transitionRemoves(),this.main.join((o,a)=>{o===1&&this.commitPendingLink(n)&&this.requestDOMUpdate(()=>{y.findPhxSticky(document).forEach(u=>r.appendChild(u)),this.outgoingMainEl.replaceWith(r),this.outgoingMainEl=null,i&&requestAnimationFrame(i),a()})})}transitionRemoves(e){let t=this.binding("remove");e=e||y.all(document,`[${t}]`),e.forEach(i=>{document.body.contains(i)&&this.execJS(i,i.getAttribute(t),"remove")})}isPhxView(e){return e.getAttribute&&e.getAttribute(ut)!==null}newRootView(e,t,i){let n=new Xs(e,this,null,t,i);return this.roots[n.id]=n,n}owner(e,t){let i=Ze(e.closest(Nt),n=>this.getViewByEl(n))||this.main;i&&t(i)}withinOwners(e,t){this.owner(e,i=>t(i,e))}getViewByEl(e){let t=e.getAttribute(ri);return Ze(this.getRootById(t),i=>i.getDescendentByEl(e))}getRootById(e){return this.roots[e]}destroyAllViews(){for(let e in this.roots)this.roots[e].destroy(),delete this.roots[e];this.main=null}destroyViewByEl(e){let t=this.getRootById(e.getAttribute(ri));t&&t.id===e.id?(t.destroy(),delete this.roots[t.id]):t&&t.destroyDescendent(e.id)}setActiveElement(e){if(this.activeElement===e)return;this.activeElement=e;let t=()=>{e===this.activeElement&&(this.activeElement=null),e.removeEventListener("mouseup",this),e.removeEventListener("touchend",this)};e.addEventListener("mouseup",t),e.addEventListener("touchend",t)}getActiveElement(){return document.activeElement===document.body?this.activeElement||document.activeElement:document.activeElement||document.body}dropActiveElement(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:e}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.socket.onClose(t=>{t&&t.code===1e3&&this.main&&this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",t=>{t.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),e||this.bindNav(),this.bindClicks(),e||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(t,i,n,s,r,o)=>{let a=s.getAttribute(this.binding(Xo)),u=t.key&&t.key.toLowerCase();if(a&&a.toLowerCase()!==u)return;let d={key:t.key,...this.eventMeta(i,t,s)};ze.exec(i,r,n,s,["push",{data:d}])}),this.bind({blur:"focusout",focus:"focusin"},(t,i,n,s,r,o)=>{if(!o){let a={key:t.key,...this.eventMeta(i,t,s)};ze.exec(i,r,n,s,["push",{data:a}])}}),this.bind({blur:"blur",focus:"focus"},(t,i,n,s,r,o,a)=>{if(a==="window"){let u=this.eventMeta(i,t,s);ze.exec(i,o,n,s,["push",{data:u}])}}),window.addEventListener("dragover",t=>t.preventDefault()),window.addEventListener("drop",t=>{t.preventDefault();let i=Ze(si(t.target,this.binding(ws)),r=>r.getAttribute(this.binding(ws))),n=i&&document.getElementById(i),s=Array.from(t.dataTransfer.files||[]);!n||n.disabled||s.length===0||!(n.files instanceof FileList)||(ge.trackFiles(n,s),n.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(Vs,t=>{let i=t.target;if(!y.isUploadInput(i))return;let n=Array.from(t.detail.files||[]).filter(s=>s instanceof File||s instanceof Blob);ge.trackFiles(i,n),i.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(e,t,i){let n=this.metadataCallbacks[e];return n?n(t,i):{}}setPendingLink(e){return this.linkRef++,this.pendingLink=e,this.linkRef}commitPendingLink(e){return this.linkRef!==e?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(e,t){for(let i in e){let n=e[i];this.on(n,s=>{let r=this.binding(i),o=this.binding(`window-${i}`),a=s.target.getAttribute&&s.target.getAttribute(r);a?this.debounce(s.target,s,n,()=>{this.withinOwners(s.target,u=>{t(s,i,u,s.target,a,null)})}):y.all(document,`[${o}]`,u=>{let d=u.getAttribute(o);this.debounce(u,s,n,()=>{this.withinOwners(u,v=>{t(s,i,v,u,d,"window")})})})})}}bindClicks(){window.addEventListener("mousedown",e=>this.clickStartedAtTarget=e.target),this.bindClick("click","click",!1),this.bindClick("mousedown","capture-click",!0)}bindClick(e,t,i){let n=this.binding(t);window.addEventListener(e,s=>{let r=null;if(i)r=s.target.matches(`[${n}]`)?s.target:s.target.querySelector(`[${n}]`);else{let a=this.clickStartedAtTarget||s.target;r=si(a,n),this.dispatchClickAway(s,a),this.clickStartedAtTarget=null}let o=r&&r.getAttribute(n);!o||(r.getAttribute("href")==="#"&&s.preventDefault(),this.debounce(r,s,"click",()=>{this.withinOwners(r,a=>{ze.exec("click",o,a,r,["push",{data:this.eventMeta("click",s,r)}])})}))},i)}dispatchClickAway(e,t){let i=this.binding("click-away");y.all(document,`[${i}]`,n=>{n.isSameNode(t)||n.contains(t)||this.withinOwners(e.target,s=>{let r=n.getAttribute(i);ze.isVisible(n)&&ze.exec("click",r,s,n,["push",{data:this.eventMeta("click",e,e.target)}])})})}bindNav(){if(!We.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let e=null;window.addEventListener("scroll",t=>{clearTimeout(e),e=setTimeout(()=>{We.updateCurrentState(i=>Object.assign(i,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",t=>{if(!this.registerNewLocation(window.location))return;let{type:i,id:n,root:s,scroll:r}=t.state||{},o=window.location.href;this.requestDOMUpdate(()=>{this.main.isConnected()&&i==="patch"&&n===this.main.id?this.main.pushLinkPatch(o,null):this.replaceMain(o,null,()=>{s&&this.replaceRootHistory(),typeof r=="number"&&setTimeout(()=>{window.scrollTo(0,r)},0)})})},!1),window.addEventListener("click",t=>{let i=si(t.target,ln),n=i&&i.getAttribute(ln),s=t.metaKey||t.ctrlKey||t.button===1;if(!n||!this.isConnected()||!this.main||s)return;let r=i.href,o=i.getAttribute(Bo);t.preventDefault(),t.stopImmediatePropagation(),this.pendingLink!==r&&this.requestDOMUpdate(()=>{if(n==="patch")this.pushHistoryPatch(r,o,i);else if(n==="redirect")this.historyRedirect(r,o);else throw new Error(`expected ${ln} to be "patch" or "redirect", got: ${n}`);let a=i.getAttribute(this.binding("click"));a&&this.requestDOMUpdate(()=>this.execJS(i,a,"click"))})},!1)}dispatchEvent(e,t={}){y.dispatchEvent(window,`phx:${e}`,{detail:t})}dispatchEvents(e){e.forEach(([t,i])=>this.dispatchEvent(t,i))}withPageLoading(e,t){y.dispatchEvent(window,"phx:page-loading-start",{detail:e});let i=()=>y.dispatchEvent(window,"phx:page-loading-stop",{detail:e});return t?t(i):i}pushHistoryPatch(e,t,i){if(!this.isConnected())return We.redirect(e);this.withPageLoading({to:e,kind:"patch"},n=>{this.main.pushLinkPatch(e,i,s=>{this.historyPatch(e,t,s),n()})})}historyPatch(e,t,i=this.setPendingLink(e)){!this.commitPendingLink(i)||(We.pushState(t,{type:"patch",id:this.main.id},e),this.registerNewLocation(window.location))}historyRedirect(e,t,i){if(!this.isConnected())return We.redirect(e,i);if(/^\/[^\/]+.*$/.test(e)){let{protocol:s,host:r}=window.location;e=`${s}//${r}${e}`}let n=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},s=>{this.replaceMain(e,i,()=>{We.pushState(t,{type:"redirect",id:this.main.id,scroll:n},e),this.registerNewLocation(window.location),s()})})}replaceRootHistory(){We.pushState("replace",{root:!0,type:"patch",id:this.main.id})}registerNewLocation(e){let{pathname:t,search:i}=this.currentLocation;return t+i===e.pathname+e.search?!1:(this.currentLocation=Li(e),!0)}bindForms(){let e=0,t=!1;this.on("submit",i=>{let n=i.target.getAttribute(this.binding("submit")),s=i.target.getAttribute(this.binding("change"));!t&&s&&!n&&(t=!0,i.preventDefault(),this.withinOwners(i.target,r=>{r.disableForm(i.target),window.requestAnimationFrame(()=>i.target.submit())}))},!0),this.on("submit",i=>{let n=i.target.getAttribute(this.binding("submit"));!n||(i.preventDefault(),i.target.disabled=!0,this.withinOwners(i.target,s=>{ze.exec("submit",n,s,i.target,["push",{}])}))},!1);for(let i of["change","input"])this.on(i,n=>{let s=this.binding("change"),r=n.target,o=r.getAttribute(s),a=r.form&&r.form.getAttribute(s),u=o||a;if(!u||r.type==="number"&&r.validity&&r.validity.badInput)return;let d=o?r:r.form,v=e;e++;let{at:w,type:g}=y.private(r,"prev-iteration")||{};w===v-1&&i!==g||(y.putPrivate(r,"prev-iteration",{at:v,type:i}),this.debounce(r,n,i,()=>{this.withinOwners(d,p=>{y.putPrivate(r,Js,!0),y.isTextualInput(r)||this.setActiveElement(r),ze.exec("change",u,p,r,["push",{_target:n.target.name,dispatcher:d}])})}))},!1)}debounce(e,t,i,n){if(i==="blur"||i==="focusout")return n();let s=this.binding(zo),r=this.binding(Yo),o=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();this.withinOwners(e,u=>{let d=()=>!u.isDestroyed()&&document.body.contains(e);y.debounce(e,t,s,o,r,a,d,()=>{n()})})}silenceEvents(e){this.silenced=!0,e(),this.silenced=!1}on(e,t){window.addEventListener(e,i=>{this.silenced||t(i)})}},_l=class{constructor(){this.transitions=new Set,this.pendingOps=[],this.reset()}reset(){this.transitions.forEach(e=>{clearTimeout(e),this.transitions.delete(e)}),this.flushPendingOps()}after(e){this.size()===0?e():this.pushPendingOp(e)}addTransition(e,t,i){t();let n=setTimeout(()=>{this.transitions.delete(n),i(),this.size()===0&&this.flushPendingOps()},e);this.transitions.add(n)}pushPendingOp(e){this.pendingOps.push(e)}size(){return this.transitions.size}flushPendingOps(){this.pendingOps.forEach(e=>e()),this.pendingOps=[]}};var Gs={phoenix:[242,110,64],elixir:[75,68,115],red:[255,99,132],orange:[255,159,64],yellow:[255,205,86],green:[75,192,192],blue:[54,162,253],purple:[153,102,255],grey:[201,203,207]},Ks=Object.keys(Gs),Qs={at:e=>{let[t,i,n]=Qs.rgb(e);return`rgb(${t}, ${i}, ${n})`},rgb:e=>Gs[Ks[e%Ks.length]]},Zs={at:e=>{let[t,i,n]=Qs.rgb(e);return{stroke:`rgb(${t}, ${i}, ${n})`,fill:`rgb(${t}, ${i}, ${n}, 0.1)`}}};function Pl(e,t){let i=null;function n(){i=null,e()}return function(){clearTimeout(i),i=setTimeout(n,t)}}function Ft(e,t,i,n){let s;i=i||0,n=n||t.length-1;let r=n<=2147483647;for(;n-i>1;)s=r?i+n>>1:Et((i+n)/2),t[s]<e?i=s:n=s;return e-t[i]<=t[n]-e?i:n}function Rl(e,t,i){let n=q,s=-q;for(let r=t;r<=i;r++)e[r]!=null&&(n=it(n,e[r]),s=li(s,e[r]));return[n,s]}function xr(e,t,i,n){let s=t-e,r=Er(s||ft(t)||1),o=Et(r),a=In(10,o)*i,u=s==0?a:0,d=Pn(Ll(e-u,a)),v=Pn(Ui(t+u,a));return n&&(s==0?t>0?(d=0,v=t*2):t<0&&(v=0,d=e*2):(v-t<a&&(v+=a),e-d<a&&(d-=a),e>=0&&d<0&&(d=0),t<=0&&v>0&&(v=0))),[d,v]}var rt=Math,ft=rt.abs,Et=rt.floor,W=rt.round,Dl=rt.ceil,it=rt.min,li=rt.max,In=rt.pow,Er=rt.log10,Ii=rt.PI,q=1/0;function Ut(e,t){return W(e/t)*t}function er(e,t,i){return it(li(e,t),i)}function kt(e){return typeof e=="function"?e:()=>e}function Ui(e,t){return Dl(e/t)*t}function Ll(e,t){return Et(e/t)*t}function Fe(e){return W(e*1e3)/1e3}function Pn(e){return W(e*1e6)/1e6}var Tr=Array.isArray;function Il(e){return typeof e=="string"}function _r(e){return typeof e=="object"&&e!==null}function Vt(e){let t;if(Tr(e))t=e.map(Vt);else if(_r(e)){t={};for(var i in e)t[i]=Vt(e[i])}else t=e;return t}function ve(e){let t=arguments;for(let i=1;i<t.length;i++){let n=t[i];for(let s in n)_r(e[s])?ve(e[s],Vt(n[s])):e[s]=Vt(n[s])}return e}var J="width",X="height",te="top",tr="bottom",ie="left",ir="right",nr="firstChild",Ml="createElement",jt="#000",Pr="classList",kn="mousemove",Cn="mousedown",Mi="mouseup",sr="mouseenter",rr="mouseleave",An="dblclick",or="resize",lr="scroll",ar=requestAnimationFrame,Rn=document,Oi=window,ne=devicePixelRatio;function dt(e,t){t!=null&&e[Pr].add(t)}function Ol(e,t){e[Pr].remove(t)}function F(e,t,i){e.style[t]=i+"px"}function tt(e,t,i,n){let s=Rn[Ml](e);return t!=null&&dt(s,t),i?.insertBefore(s,n),s}function Ne(e,t){return tt("div",e,t)}function $t(e,t,i){e.style.transform="translate("+t+"px,"+i+"px)"}var Rr={passive:!0};function He(e,t,i){t.addEventListener(e,i,Rr)}function xn(e,t,i){t.removeEventListener(e,i,Rr)}var Dr=["January","February","March","April","May","June","July","August","September","October","November","December"],Lr=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];function Ir(e){return e.slice(0,3)}var Hl=Lr.map(Ir),Nl=Dr.map(Ir),Fl={MMMM:Dr,MMM:Nl,WWWW:Lr,WWW:Hl};function oi(e){return(e<10?"0":"")+e}function Ul(e){return(e<10?"00":e<100?"0":"")+e}var Bt="getFullYear",xt="getMonth",Ni="getDate",hr="getDay",Ct="getHours",Fi="getMinutes",Dn="getSeconds",Mr="getMilliseconds",$l={YYYY:e=>e[Bt](),YY:e=>(e[Bt]()+"").slice(2),MMMM:(e,t)=>t.MMMM[e[xt]()],MMM:(e,t)=>t.MMM[e[xt]()],MM:e=>oi(e[xt]()+1),M:e=>e[xt]()+1,DD:e=>oi(e[Ni]()),D:e=>e[Ni](),WWWW:(e,t)=>t.WWWW[e[hr]()],WWW:(e,t)=>t.WWW[e[hr]()],HH:e=>oi(e[Ct]()),H:e=>e[Ct](),h:e=>{let t=e[Ct]();return t==0?12:t>12?t-12:t},AA:e=>e[Ct]()>=12?"PM":"AM",aa:e=>e[Ct]()>=12?"pm":"am",a:e=>e[Ct]()>=12?"p":"a",mm:e=>oi(e[Fi]()),m:e=>e[Fi](),ss:e=>oi(e[Dn]()),s:e=>e[Dn](),fff:e=>Ul(e[Mr]())};function Or(e,t){t=t||Fl;let i=[],n=/\{([a-z]+)\}|[^{]+/gi,s;for(;s=n.exec(e);)i.push(s[0][0]=="{"?$l[s[1]]:s[0]);return r=>{let o="";for(let a=0;a<i.length;a++)o+=typeof i[a]=="string"?i[a]:i[a](r,t);return o}}function jl(e,t){let i;return t=="Etc/UTC"?i=new Date(+e+e.getTimezoneOffset()*6e4):(i=new Date(e.toLocaleString("en-US",{timeZone:t})),i.setMilliseconds(e[Mr]())),i}function Mn(e,t,i){let n=[];for(let s=e;s<t;s++)for(let r=0;r<i.length;r++){let o=i[r]*In(10,s);n.push(+o.toFixed(ft(s)))}return n}var On=[1,2,5],Bl=Mn(-12,0,On),Hr=Mn(0,12,On),Vl=Bl.concat(Hr),Jl=1,st=60,Le=st*st,ae=Le*24,At=ae*30,nt=ae*365,Wl=[5e-4].concat(Mn(-3,0,On),[1,5,10,15,30,st,st*5,st*10,st*15,st*30,Le,Le*2,Le*3,Le*4,Le*6,Le*8,Le*12,ae,ae*2,ae*3,ae*4,ae*5,ae*6,ae*7,ae*8,ae*9,ae*10,ae*15,At,At*2,At*3,At*4,At*6,nt,nt*2,nt*5,nt*10,nt*25,nt*50,nt*100]);function cr(e,t){return e.map(i=>[i[0],t(i[1]),i[2],t(i[4]?i[1]+i[3]:i[3])])}var Nr="{YYYY}",ur=`
`+Nr,Fr="{M}/{D}",Hi=`
`+Fr,Ur="{aa}",zl="{h}:{mm}",En=zl+Ur,dr=":{ss}",Yl=[[nt,Nr,7,"",1],[ae*28,"{MMM}",7,ur,1],[ae,Fr,7,ur,1],[Le,"{h}"+Ur,4,Hi,1],[st,En,4,Hi,1],[Jl,dr,2,Hi+" "+En,1],[.001,dr+".{fff}",2,Hi+" "+En,1]];function fr(e,t){return(i,n,s,r)=>{let o=t.find(v=>r>=v[0])||t[t.length-1],a=null,u=null,d=null;return n.map((v,w)=>{let g=e(v),p=g[Bt](),C=g[Ni](),A=g[Fi](),P=p!=a,N=C!=u,M=A!=d,b=o[2]==7&&P||o[2]==4&&N||o[2]==2&&M?o[3]:o[1];return a=p,u=C,d=A,b(g)})}}function Tn(e,t,i){return new Date(e,t,i)}function Xl(e){return(t,i,n,s,r)=>{let o=[],a=s>=At&&s<nt,u=e(i),d=u/1e3,v=Tn(u[Bt](),u[xt](),a?1:u[Ni]()),w=v/1e3;if(a){let g=s/At,p=d==w?d:Tn(v[Bt](),v[xt]()+g,1)/1e3,C=new Date(p*1e3),A=C[Bt](),P=C[xt]();for(let N=0;p<=n;N++){let M=Tn(A,P+g*N,1),b=M-e(M/1e3);p=(+M+b)/1e3,p<=n&&o.push(p)}}else{let g=s>=ae?ae:s,p=Et(i)-Et(d),C=w+p+Ui(d-w,g);o.push(C);let A=e(C),P=A[Ct]()+A[Fi]()/st+A[Dn]()/Le,N=s/Le;for(;;){C=Fe(C+s);let M=Et(Pn(P+N))%24,he=e(C).getHours()-M;if(he>1&&(he=-1),C-=he*Le,C>n)break;P=(P+N)%24;let Y=o[o.length-1];Fe((C-Y)/s)*r>=.7&&o.push(C)}}return o}}function pr(e,t){return t(e)}var ql="{YYYY}-{MM}-{DD} {h}:{mm}{aa}";function gr(e,t){return(i,n)=>t(e(n))}function Kl(e,t){let i=e.series[t],n=Ne();n.style.background=i.stroke||jt;let s=Fn(i.width,1),r=(s-1)/-2;return F(n,J,s),F(n,X,s),F(n,"marginLeft",r),F(n,"marginTop",r),n}var Gl={show:!0,x:!0,y:!0,lock:!1,points:{show:Kl},drag:{setScale:!0,x:!0,y:!1,dist:0,uni:null,_x:!1,_y:!1},focus:{prox:-1},locked:!1,left:-10,top:-10,idx:null},Hn={show:!0,stroke:"rgba(0,0,0,0.07)",width:2},$r=ve({},Hn,{size:10}),Nn='12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"',jr="bold "+Nn,Ql=1.5,mr={type:"x",show:!0,scale:"x",space:50,gap:5,size:50,labelSize:30,labelFont:jr,side:2,grid:Hn,ticks:$r,font:Nn,rotate:0},Zl="Value",ea="Time",vr={show:!0,scale:"x",min:q,max:-q,idxs:[]},ta=new Intl.NumberFormat(navigator.language);function ia(e,t,i,n){return t.map(ta.format)}function na(e,t,i,n,s,r){t=r?t:+Ui(t,n).toFixed(12);let o=[];for(let a=t;a<=i;a=+(a+n).toFixed(12))o.push(a);return o}function sa(e,t){return t}var br={type:"y",show:!0,scale:"y",space:40,gap:5,size:50,labelSize:30,labelFont:jr,side:3,grid:Hn,ticks:$r,font:Nn,rotate:0};function Fn(e,t){let i=3+(e||1)*2;return Fe(i*t)}function ra(e,t){let i=Fn(e.series[t].width,ne),n=e.bbox.width/i/2,s=e.series[0].idxs;return s[1]-s[0]<=n}var yr={scale:"y",show:!0,band:!1,spanGaps:!1,alpha:1,points:{show:ra},values:null,min:q,max:-q,idxs:[],path:null,clip:null},Ln={time:!0,auto:!1,distr:1,min:null,max:null},wr=ve({},Ln,{time:!1,auto:!0}),Sr={};function kr(e){let t=[];return{sub(i){t.push(i)},unsub(i){t=t.filter(n=>n!=i)},pub(i,n,s,r,o,a,u){t.length>1&&t.forEach(d=>{d!=n&&d.pub(i,n,s,r,o,a,u)})}}}function Cr(e,t,i,n){return(n?[e[0],e[1]].concat(e.slice(2)):[e[0]].concat(e.slice(1))).map((r,o)=>Br(r,o,t,i))}function Br(e,t,i,n){return ve({},t==0||e&&e.side%2==0?i:n,e)}function De(e,t,i,n){let s=(e-t.min)/(t.max-t.min);return n+(1-s)*i}function et(e,t,i,n){let s=(e-t.min)/(t.max-t.min);return n+s*i}function oa(e,t,i){return[t,i>t?i:i+86400]}function la(e,t,i){let n=i-t;if(n==0){let s=Er(n||ft(i)||1),r=Et(s)+1;return[t,Ui(i,In(10,r))]}else return[t,i]}function aa(e,t,i){return xr(t,i,.2,!0)}function ha(e,t,i,n){let s=i/e;for(var r=0;r<t.length;r++){let o=t[r]*s;if(o>=n)return[t[r],o]}}function _n(e){return e.button==0}function Ar(e){let t;return e=e.replace(/\d+/,i=>t=W(i*ne)),[e,t]}function ai(e,t,i){let n={},s=n.root=Ne("uplot");if(e.id!=null&&(s.id=e.id),dt(s,e.class),e.title){let l=Ne("title",s);l.textContent=e.title}let r=tt("canvas"),o=n.ctx=r.getContext("2d"),a=Ne("wrap",s),u=Ne("under",a);a.appendChild(r);let d=Ne("over",a);e=Vt(e),(e.plugins||[]).forEach(l=>{l.opts&&(e=l.opts(n,e)||e)});let v=!1,w=n.series=Cr(e.series||[],vr,yr,!1),g=n.axes=Cr(e.axes||[],mr,br,!0),p=n.scales=ve({},{x:Ln,y:wr},e.scales),C=ve({x:W(br.size/2),y:W(mr.size/3)},e.gutters),A=e.tzDate||(l=>new Date(l*1e3)),P=e.fmtDate||Or,N=Xl(A),M=fr(A,cr(Yl,P)),b=gr(A,pr(ql,P)),_={};for(let l in p){let h=p[l];(h.min!=null||h.max!=null)&&(_[l]={min:h.min,max:h.max})}let Y=ve({show:!0},e.legend).show,Pe,Ue=[],K,Ie=!1;if(Y){Pe=tt("table","legend",s);let l=w[1]?w[1].values:null;if(Ie=l!=null,Ie){let h=tt("tr","labels",Pe);tt("th",null,h),K=l(n,1,0);for(var ui in K)tt("th",null,h).textContent=ui}else K={_:0},dt(Pe,"inline")}function Jt(l,h){if(h==0&&Ie)return null;let c=[],f=tt("tr","series",Pe,Pe.childNodes[h]);dt(f,l.class),l.show||dt(f,"off");let m=tt("th",null,f),k=Ne("ident",m);l.width&&(k.style.borderColor=l.stroke),k.style.backgroundColor=l.fill;let S=Ne("text",m);S.textContent=l.label,h>0&&(He("click",m,E=>{U.locked||_n(E)&&mt(w.indexOf(l),{show:!l.show},at.setSeries)}),D&&He(sr,m,E=>{U.locked||mt(w.indexOf(l),{focus:!0},at.setSeries)}));for(var x in K){let E=tt("td",null,f);E.textContent="--",c.push(E)}return c}let U=n.cursor=ve({},Gl,e.cursor);U.points.show=kt(U.points.show);let pt=n.focus=ve({},e.focus||{alpha:.3},U.focus),D=pt.prox>=0,T=[null];function R(l,h){if(h>0){let c=U.points.show(n,h);if(c)return dt(c,"cursor-pt"),dt(c,l.class),$t(c,-10,-10),d.insertBefore(c,T[h]),c}}function $(l,h){let c=l.scale,f=p[c]=ve({},h==0?Ln:wr,p[c]),m=f.time;f.range=kt(f.range||(m?oa:h==0?la:aa));let k=l.value;if(l.value=m?Il(k)?gr(A,pr(k,P)):k||b:k||sa,l.label=l.label||(m?ea:Zl),h>0){l.width=l.width==null?1:l.width,l.paths=l.paths||po;let S=Fn(l.width,1);l.points=ve({},{size:S,width:li(1,S*.2)},l.points),l.points.show=kt(l.points.show),l._paths=null}if(Y&&Ue.splice(h,0,Jt(l,h)),U.show){let S=R(l,h);S&&T.splice(h,0,S)}}function Ce(l,h){h=h??w.length,l=Br(l,h,vr,yr),w.splice(h,0,l),$(w[h],h)}n.addSeries=Ce;function $e(l){w.splice(l,1),Y&&Ue.splice(l,1)[0][0].parentNode.remove(),T.length>1&&T.splice(l,1)[0].remove()}n.delSeries=$e,w.forEach($);for(let l in p){let h=p[l];h.from!=null&&(p[l]=ve({},p[h.from],h))}let H=w[0].scale,Xe=p[H].distr;function je(l,h){if(l.show){let c=l.side%2,f=p[l.scale];f==null&&(l.scale=c?w[1].scale:H,f=p[l.scale]);let m=f.time;l.space=kt(l.space),l.rotate=kt(l.rotate),l.incrs=kt(l.incrs||(f.distr==2?Hr:m?Wl:Vl)),l.split=kt(l.split||(m&&f.distr==1?N:na));let k=l.values;l.values=m?Tr(k)?fr(A,cr(k,P)):k||M:k||ia,l.font=Ar(l.font),l.labelFont=Ar(l.labelFont)}}g.forEach(je);let we,z=null,Q=null,Wt=w[0].idxs,qe=null;function Wn(l,h){l=l||[],l[0]=l[0]||[],n.data=l,t=l.slice(),qe=t[0],we=qe.length,Xe==2&&(t[0]=qe.map((c,f)=>f)),Gn(),Ae("setData"),h!==!1&&Ji()}n.setData=Wn;function Ji(){z=Wt[0]=0,Q=Wt[1]=we-1;let l=Xe==2?z:t[0][z],h=Xe==2?Q:t[0][Q];Pt(H,l,h)}function Wi(l,h,c,f){o.strokeStyle=l||jt,o.lineWidth=h,o.lineJoin="round",o.setLineDash(c||[]),o.fillStyle=f||jt}let zi,Yi,B,V,ot,lt,se,le,Se,be;n.bbox={};function zn(l,h){n.width=zi=B=l,n.height=Yi=V=h,ot=lt=0,oo(),lo();let c=n.bbox;se=c[ie]=Ut(ot*ne,.5),le=c[te]=Ut(lt*ne,.5),Se=c[J]=Ut(B*ne,.5),be=c[X]=Ut(V*ne,.5),F(u,ie,ot),F(u,te,lt),F(u,J,B),F(u,X,V),F(d,ie,ot),F(d,te,lt),F(d,J,B),F(d,X,V),F(a,J,zi),F(a,X,Yi),r[J]=W(zi*ne),r[X]=W(Yi*ne),mi(),v&&Pt(H,p[H].min,p[H].max),v&&Ae("setSize")}function ro({width:l,height:h}){zn(l,h)}n.setSize=ro;function oo(){let l=!1,h=!1,c=!1,f=!1;g.forEach((m,k)=>{if(m.show){let{side:S,size:x}=m,E=S%2,L=m.labelSize=m.label!=null?m.labelSize||30:0,I=x+L;I>0&&(E?(B-=I,S==3?(ot+=I,f=!0):c=!0):(V-=I,S==0?(lt+=I,l=!0):h=!0))}}),(l||h)&&(c||(B-=C.x),f||(B-=C.x,ot+=C.x)),(f||c)&&(h||(V-=C.y),l||(V-=C.y,lt+=C.y))}function lo(){let l=ot+B,h=lt+V,c=ot,f=lt;function m(k,S){switch(k){case 1:return l+=S,l-S;case 2:return h+=S,h-S;case 3:return c-=S,c+S;case 0:return f-=S,f+S}}g.forEach((k,S)=>{let x=k.side;k._pos=m(x,k.size),k.label!=null&&(k._lpos=m(x,k.labelSize))})}function Yn(){if(Dt){Ki=!0;return}if(we>0){let l=Vt(p);for(let c in l){let f=l[c],m=_[c];m!=null?(ve(f,m),c==H&&Gn()):c!=H&&(f.min=q,f.max=-q)}w.forEach((c,f)=>{let m=c.scale,k=l[m];if(f==0){let S=k.range(n,k.min,k.max);k.min=S[0],k.max=S[1],z=Ft(k.min,t[0]),Q=Ft(k.max,t[0]),t[0][z]<k.min&&z++,t[0][Q]>k.max&&Q--,c.min=qe[z],c.max=qe[Q]}else if(c.show&&_[m]==null){let S=c.min==q?k.auto?Rl(t[f],z,Q):[0,100]:[c.min,c.max];k.min=it(k.min,c.min=S[0]),k.max=li(k.max,c.max=S[1])}c.idxs[0]=z,c.idxs[1]=Q});for(let c in l){let f=l[c];if(f.from==null&&f.min!=q&&_[c]==null){let m=f.range(n,f.min,f.max);f.min=m[0],f.max=m[1]}}for(let c in l){let f=l[c];if(f.from!=null){let m=l[f.from];if(m.min!=q){let k=f.range(n,m.min,m.max);f.min=k[0],f.max=k[1]}}}let h={};for(let c in l){let f=l[c],m=p[c];(m.min!=f.min||m.max!=f.max)&&(m.min=f.min,m.max=f.max,h[c]=!0)}w.forEach(c=>{h[c.scale]&&(c._paths=null)});for(let c in h)Ae("setScale",c)}for(let l in _)_[l]=null;U.show&&Ke()}function ao(l){let h=w[l],c=h.points,f=Fe(c.width*ne),m=f%2/2,k=c.width>0,S=(c.size-c.width)/2*ne,x=Fe(S*2);o.translate(m,m),o.save(),o.beginPath(),o.rect(se-x,le-x,Se+x*2,be+x*2),o.clip(),o.globalAlpha=h.alpha;let E=new Path2D;for(let L=z;L<=Q;L++)if(t[l][L]!=null){let I=W(et(t[0][L],p[H],Se,se)),j=W(De(t[l][L],p[h.scale],be,le));E.moveTo(I+S,j),E.arc(I,j,S,0,Ii*2)}Wi(c.stroke||h.stroke||jt,f,null,c.fill||(k?"#fff":h.stroke||jt)),o.fill(E),k&&o.stroke(E),o.globalAlpha=1,o.restore(),o.translate(-m,-m)}function ho(l){let h=er(z-1,0,we-1),c=er(Q+1,0,we-1);for(;l[h]==null&&h>0;)h--;for(;l[c]==null&&c<we-1;)c++;return[h,c]}let Me=1;function co(){w.forEach((l,h)=>{if(h>0&&l.show&&we>0&&l._paths==null){let c=ho(t[h]);l._paths=l.paths(n,h,c[0],c[1])}}),w.forEach((l,h)=>{h>0&&l.show&&(l._paths&&uo(h),l.points.show(n,h,z,Q)&&ao(h),Ae("drawSeries",h))})}function uo(l){let h=w[l];if(Me==1){let{stroke:c,fill:f,clip:m}=h._paths,k=Fe(h[J]*ne),S=k%2/2;Wi(h.stroke,k,h.dash,h.fill),o.globalAlpha=h.alpha,o.translate(S,S),o.save();let x=se,E=le,L=Se,I=be,j=k*ne/2;h.min==0&&(I+=j),h.max==0&&(E-=j,I+=j),o.beginPath(),o.rect(x,E,L,I),o.clip(),m!=null&&o.clip(m),h.band?(o.fill(c),k&&o.stroke(c)):(k&&o.stroke(c),h.fill!=null&&o.fill(f)),o.restore(),o.translate(-S,-S),o.globalAlpha=1}h.band&&(Me*=-1)}function fo(l,h,c,f){let m=w[l],k=null;if(h.length>0){if(m.spanGaps){let x=h[0],E=h[h.length-1];h=[],c&&h.push(x),f&&h.push(E)}k=new Path2D;let S=se;for(let x=0;x<h.length;x++){let E=h[x];k.rect(S,le,E[0]-S,le+be),S=E[1]}k.rect(S,le,se+Se-S,le+be)}return k}function Xn(l,h,c){let f=l[l.length-1];f&&f[0]==h?f[1]=c:l.push([h,c])}function po(l,h,c,f){let m=w[h],k=t[0],S=t[h],x=p[H],E=p[m.scale],L=Me==1?{stroke:new Path2D,fill:null,clip:null}:w[h-1]._paths,I=L.stroke,j=Fe(m[J]*ne),re=q,fe=-q,Re,Ge,bt=[],pe=W(et(k[Me==1?c:f],x,Se,se));m.band&&Me==1&&c==z&&(j&&I.lineTo(-j,W(De(S[c],E,be,le))),x.min<k[0]&&bt.push([se,pe-1]));for(let oe=Me==1?c:f;oe>=c&&oe<=f;oe+=Me){let ye=W(et(k[oe],x,Se,se));if(ye==pe)S[oe]!=null&&(Re=W(De(S[oe],E,be,le)),re=it(Re,re),fe=li(Re,fe));else{let xe=!1;re!=q?(I.lineTo(pe,re),I.lineTo(pe,fe),I.lineTo(pe,Re),Ge=pe):xe=!0,S[oe]!=null?(Re=W(De(S[oe],E,be,le)),I.lineTo(ye,Re),re=fe=Re,ye-pe>1&&S[oe-1]==null&&(xe=!0)):(re=q,fe=-q),xe&&Xn(bt,Ge,ye),pe=ye}}if(S[f]==null&&Xn(bt,Ge,pe),m.band){let oe=j*100,ye,xe;Me==-1&&c==z&&(xe=se-oe,ye=c),Me==1&&f==Q&&(xe=se+Se+oe,ye=f,x.max>k[we-1]&&bt.push([pe,se+Se])),I.lineTo(xe,W(De(S[ye],E,be,le)))}if(Me==1&&(L.clip=fo(h,bt,S[c]==null,S[f]==null),m.fill!=null)){let oe=L.fill=new Path2D(I),ye=W(De(0,E,be,le));oe.lineTo(se+Se,ye),oe.lineTo(se,ye)}return m.band&&(Me*=-1),L}function qn(l,h,c,f){let m;if(f<=0)m=[0,0];else{let k=l.space(n,h,c,f),S=l.incrs(n,h,c,f,k);m=ha(c-h,S,f,k),m.push(m[1]/k)}return m}function Kn(l,h,c,f,m,k,S,x){let E=k%2/2;o.translate(E,E),Wi(S,k,x),o.beginPath();let L,I,j,re,fe=f+(c==0||c==3?-m:m);h==0?(I=f,re=fe):(L=f,j=fe),l.forEach((Re,Ge)=>{h==0?L=j=Re:I=re=Re,o.moveTo(L,I),o.lineTo(j,re)}),o.stroke(),o.translate(-E,-E)}function go(){g.forEach((l,h)=>{if(!l.show)return;let c=p[l.scale];if(c.min==q)return;let f=l.side,m=f%2,{min:k,max:S}=c,[x,E,L]=qn(l,k,S,m==0?B:V),I=c.distr==2,j=l.split(n,k,S,x,L,I),re=m==0?et:De,fe=m==0?Se:be,Re=m==0?se:le,Ge=j.map(ht=>W(re(ht,c,fe,Re))),bt=W(l.gap*ne),pe=l.ticks,oe=pe.show?W(pe.size*ne):0,ye=l.values(n,c.distr==2?j.map(ht=>qe[ht]):j,E,c.distr==2?qe[j[1]]-qe[j[0]]:x),xe=f==2?l.rotate(n,ye,E)*-Ii/180:0,hs=W(l._pos*ne),So=oe+bt,ko=m==0&&f==0||m==1&&f==3?-1:1,cs=hs+So*ko,It=m==0?cs:0,Mt=m==1?cs:0;o.font=l.font[0],o.fillStyle=l.stroke||jt,o.textAlign=xe>0?ie:xe<0?ir:m==0?"center":f==3?ir:ie,o.textBaseline=xe||m==1?"middle":f==2?te:tr;let us=l.font[1]*Ql;if(ye.forEach((ht,ds)=>{m==0?Mt=Ge[ds]:It=Ge[ds],(""+ht).split(/\n/gm).forEach((fs,ps)=>{xe?(o.save(),o.translate(Mt,It+ps*us),o.rotate(xe),o.fillText(fs,0,0),o.restore()):o.fillText(fs,Mt,It+ps*us)})}),l.label){o.save();let ht=W(l._lpos*ne);m==1?(Mt=It=0,o.translate(ht,W(le+be/2)),o.rotate((f==3?-Ii:Ii)/2)):(Mt=W(se+Se/2),It=ht),o.font=l.labelFont[0],o.textAlign="center",o.textBaseline=f==2?te:tr,o.fillText(l.label,Mt,It),o.restore()}pe.show&&Kn(Ge,m,f,hs,oe,Fe(pe[J]*ne),pe.stroke);let bi=l.grid;bi.show&&Kn(Ge,m,m==0?2:1,m==0?le:se,m==0?be:Se,Fe(bi[J]*ne),bi.stroke,bi.dash)}),Ae("drawAxes")}function Gn(){w.forEach((l,h)=>{h>0&&(l.min=q,l.max=-q,l._paths=null)})}let _t;function di(){if(Dt){qi=!0;return}o.clearRect(0,0,r[J],r[X]),Ae("drawClear"),go(),co(),_t=!0,Ae("draw")}n.redraw=l=>{l!==!1?Pt(H,p[H].min,p[H].max):di()};function Xi(l,h){let c=p[l];if(c.from==null){if(l==H&&(c.distr==2&&(h.min=Ft(h.min,t[0]),h.max=Ft(h.max,t[0])),c.time&&g[0].show&&h.max>h.min&&qn(g[0],h.min,h.max,B)[0]<.001))return;_[l]=h,_t=!1,Yn(),!_t&&di(),_t=!1}}n.setScale=Xi;let Qn,Zn,fi,pi,G,Z,gt=!1,ce=U.drag,ue=ce.x,de=ce.y;if(U.show){let l="cursor-";U.x&&(G=U.left,Qn=Ne(l+"x",d)),U.y&&(Z=U.top,Zn=Ne(l+"y",d))}let O=n.select=ve({show:!0,left:0,width:0,top:0,height:0},e.select),ee=O.show?Ne("select",d):null;function gi(l,h){if(O.show){for(let c in l)F(ee,c,O[c]=l[c]);h!==!1&&Ae("setSelect")}}n.setSelect=gi;function es(l,h){let c=w[l],f=Y?Ue[l][0].parentNode:null;c.show?f&&Ol(f,"off"):(f&&dt(f,"off"),T.length>1&&$t(T[l],0,-10))}function Pt(l,h,c){Xi(l,{min:h,max:c})}function mt(l,h,c){let f=w[l];if(h.focus!=null&&vo(l),h.show!=null){if(f.show=h.show,es(l,h.show),f.band){let m=w[l+1]&&w[l+1].band?l+1:l-1;w[m].show=f.show,es(m,h.show)}Pt(H,p[H].min,p[H].max)}Ae("setSeries",l,h),c&&vt.pub("setSeries",n,l,h)}n.setSeries=mt;function ts(l,h){w[l].alpha=h,Ue&&(Ue[l][0].parentNode.style.opacity=h)}function mo(l,h){let c=w[l];if(ts(l,h),c.band){let f=w[l+1].band?l+1:l-1;ts(f,h)}}let zt=Array(w.length),is=null;function vo(l){l!=is&&(w.forEach((h,c)=>{mo(c,l==null||c==0||c==l?1:pt.alpha)}),is=l,di())}Y&&D&&He(rr,Pe,l=>{U.locked||(mt(null,{focus:!1},at.setSeries),Ke())});function Rt(l,h){let c=B;h!=H&&(c=V,l=c-l);let f=l/c,m=p[h],k=m.max-m.min;return m.min+f*k}function ns(l){let h=Rt(l,H);return Ft(h,t[0],z,Q)}n.valToIdx=l=>Ft(l,t[0]),n.posToIdx=ns,n.posToVal=Rt,n.valToPos=(l,h,c)=>h==H?et(l,p[h],c?Se:B,c?se:0):De(l,p[h],c?be:V,c?le:0);let Dt=!1,qi=!1,Ki=!1,Gi=!1;function ss(l){Dt=!0,l(n),Dt=!1,Ki&&Yn(),Gi&&Ke(),qi&&!_t&&di(),Ki=Gi=qi=_t=Dt}n.batch=ss,n.setCursor=l=>{G=l.left,Z=l.top,Ke()};let Qi=0;function Ke(l,h){if(Dt){Gi=!0;return}Qi=0,U.show&&(U.x&&$t(Qn,W(G),0),U.y&&$t(Zn,0,W(Z)));let c,f=z>Q;if(G<0||we==0||f){c=null;for(let m=0;m<w.length;m++)if(m>0&&(zt[m]=q,T.length>1&&$t(T[m],-10,-10)),Y){if(m==0&&Ie)continue;for(let k=0;k<Ue[m].length;k++)Ue[m][k][nr].nodeValue="--"}D&&mt(null,{focus:!0},at.setSeries)}else{c=ns(G);let m=p[H],k=Fe(et(t[0][c],m,B,0));for(let S=0;S<w.length;S++){let x=w[S];if(S>0&&x.show){let E=t[S][c],L=E==null?-10:Fe(De(E,p[x.scale],V,0));zt[S]=L>0?ft(L-Z):q,T.length>1&&$t(T[S],k,L)}else zt[S]=q;if(Y){if(c==U.idx||S==0&&Ie)continue;let E=S==0&&Xe==2?qe:t[S],L=Ie?x.values(n,S,c):{_:x.value(n,E[c],S,c)},I=0;for(let j in L)Ue[S][I++][nr].nodeValue=L[j]}}}if(O.show&&gt){let m=ft(G-fi),k=ft(Z-pi);if(h!=null){let[S,x]=at.scales,E=h.cursor.drag;if(ue=E._x,de=E._y,S){let L=p[S],I=h.posToVal(h.select[ie],S),j=h.posToVal(h.select[ie]+h.select[J],S);O[ie]=et(I,L,B,0),O[J]=ft(O[ie]-et(j,L,B,0)),F(ee,ie,O[ie]),F(ee,J,O[J]),x||(F(ee,te,O[te]=0),F(ee,X,O[X]=V))}if(x){let L=p[x],I=h.posToVal(h.select[te],x),j=h.posToVal(h.select[te]+h.select[X],x);O[te]=De(I,L,V,0),O[X]=ft(O[te]-De(j,L,V,0)),F(ee,te,O[te]),F(ee,X,O[X]),S||(F(ee,ie,O[ie]=0),F(ee,J,O[J]=B))}}else{ue=ce.x&&m>=ce.dist,de=ce.y&&k>=ce.dist;let S=ce.uni;if(S!=null?ue&&de&&(ue=m>=S,de=k>=S,!ue&&!de&&(k>m?de=!0:ue=!0)):ce.x&&ce.y&&(ue||de)&&(ue=de=!0),ue){let x=it(fi,G);F(ee,ie,O[ie]=x),F(ee,J,O[J]=m),de||(F(ee,te,O[te]=0),F(ee,X,O[X]=V))}if(de){let x=it(pi,Z);F(ee,te,O[te]=x),F(ee,X,O[X]=k),ue||(F(ee,ie,O[ie]=0),F(ee,J,O[J]=B))}!ue&&!de&&(F(ee,X,O[X]=0),F(ee,J,O[J]=0))}}if(U.idx=c,U.left=G,U.top=Z,ce._x=ue,ce._y=de,l!=null&&(vt.pub(kn,n,G,Z,B,V,c),D)){let m=it.apply(null,zt),k=null;m<=pt.prox&&zt.some((S,x)=>{if(S==m)return k=x}),mt(k,{focus:!0},at.setSeries)}v&&Ae("setCursor")}let Zi=null;function mi(){Zi=d.getBoundingClientRect()}function rs(l,h,c,f,m,k,S){U.locked||(en(l,h,c,f,m,k,S,!1,l!=null),l!=null?Qi==0&&(Qi=ar(Ke)):Ke(null,h))}function en(l,h,c,f,m,k,S,x,E){if(l!=null)c=l.clientX-Zi.left,f=l.clientY-Zi.top;else{if(c<0||f<0){G=-10,Z=-10;return}let[L,I]=at.scales;L!=null?c=et(h.posToVal(c,L),p[L],B,0):c=B*(c/m),I!=null?f=De(h.posToVal(f,I),p[I],V,0):f=V*(f/k)}E&&((c<=1||c>=B-1)&&(c=Ut(c,B)),(f<=1||f>=V-1)&&(f=Ut(f,V))),x?(fi=c,pi=f):(G=c,Z=f)}function os(){gi({width:0,height:0},!1)}function ls(l,h,c,f,m,k,S){(h!=null||_n(l))&&(gt=!0,ue=de=ce._x=ce._y=!1,en(l,h,c,f,m,k,S,!0,!1),l!=null&&(He(Mi,Rn,tn),vt.pub(Cn,n,fi,pi,B,V,null)))}function tn(l,h,c,f,m,k,S){if(h!=null||_n(l)){gt=ce._x=ce._y=!1,en(l,h,c,f,m,k,S,!1,!0);let x=O[J]>0||O[X]>0;x&&gi(O),ce.setScale&&x?(ss(()=>{if(ue&&Pt(H,Rt(O[ie],H),Rt(O[ie]+O[J],H)),de)for(let E in p){let L=p[E];E!=H&&L.from==null&&Pt(E,Rt(O[te]+O[X],E),Rt(O[te],E))}}),os()):U.lock&&(U.locked=!U.locked,U.locked||Ke())}l!=null&&(xn(Mi,Rn,tn),vt.pub(Mi,n,G,Z,B,V,null))}function bo(l,h,c,f,m,k,S){if(!U.locked){let x=gt;if(gt){let E=!0,L=!0,I=10;if(ue&&de&&(E=G<=I||G>=B-I,L=Z<=I||Z>=V-I),ue&&E){let j=G,re=B-G,fe=it(j,re);fe==j&&(G=0),fe==re&&(G=B)}if(de&&L){let j=Z,re=V-Z,fe=it(j,re);fe==j&&(Z=0),fe==re&&(Z=V)}Ke(1),gt=!1}G=-10,Z=-10,Ke(1),x&&(gt=x)}}function as(l,h,c,f,m,k,S){Ji(),os(),l!=null&&vt.pub(An,n,G,Z,B,V,null)}let Lt={};Lt[Cn]=ls,Lt[kn]=rs,Lt[Mi]=tn,Lt[An]=as,Lt.setSeries=(l,h,c,f)=>{mt(c,f)};let Yt;U.show&&(He(Cn,d,ls),He(kn,d,rs),He(sr,d,mi),He(rr,d,l=>{ar(bo)}),He(An,d,as),Yt=Pl(mi,100),He(or,Oi,Yt),He(lr,Oi,Yt),n.syncRect=mi);let vi=n.hooks=e.hooks||{};function Ae(l,h,c){l in vi&&vi[l].forEach(f=>{f.call(null,n,h,c)})}(e.plugins||[]).forEach(l=>{for(let h in l.hooks)vi[h]=(vi[h]||[]).concat(l.hooks[h])});let at=ve({key:null,setSeries:!1,scales:[H,null]},U.sync),nn=at.key,vt=nn!=null?Sr[nn]=Sr[nn]||kr():kr();vt.sub(n);function yo(l,h,c,f,m,k,S){Lt[l](null,h,c,f,m,k,S)}n.pub=yo;function wo(){vt.unsub(n),xn(or,Oi,Yt),xn(lr,Oi,Yt),s.remove(),Ae("destroy")}n.destroy=wo;function sn(){zn(e[J],e[X]),Ae("init",e,t),Wn(t||e.data,!1),_[H]?Xi(H,_[H]):Ji(),gi(O,!1),v=!0,Ae("ready")}return i?i instanceof HTMLElement?(i.appendChild(s),sn()):i(n,sn):sn(),n}ai.assign=ve;ai.rangeNum=xr;ai.fmtDate=Or,ai.tzDate=jl;var Un=ai;var ca=e=>e.unit?{value:(t,i)=>i==null?"--":i.toFixed(3)+` ${e.unit}`}:{},Jr=e=>({value:"{YYYY}-{MM}-{DD} {HH}:{mm}:{ss}"}),ua=e=>e.unit?{values:(t,i,n)=>i.map(s=>+s.toFixed(2)+` ${e.unit}`)}:{},Wr=e=>({space:55,values:[[3600*24*365,"{YYYY}",7,"{YYYY}"],[3600*24*28,"{MMM}",7,`{MMM}
{YYYY}`],[3600*24,"{MM}-{DD}",7,`{MM}-{DD}
{YYYY}`],[3600,"{HH}:{mm}",4,`{HH}:{mm}
{YYYY}-{MM}-{DD}`],[60,"{HH}:{mm}",4,`{HH}:{mm}
{YYYY}-{MM}-{DD}`],[1,"{ss}",2,`{HH}:{mm}:{ss}
{YYYY}-{MM}-{DD}`]]}),zr=e=>({show:!0,size:70,space:15,...ua(e)}),$i={width:100,height:300};function da(e,t){let i=!1;return()=>{i||(requestAnimationFrame(e),i=!0,setTimeout(()=>{i=!1},t))}}var ji=(e,t=0)=>({...Zs.at(t),...ca(e),label:e.label,spanGaps:!0,points:{show:!1}}),Yr=e=>e.slice(0).map(({data:t})=>t);function fa({y:e,z:t},i){this.datasets[0].data.push(t);let n=this.datasets[1].data[this.datasets[1].data.length-1]||0,s=i.call(this,e,n);this.datasets[1].data.push(s)}var $n=e=>e.reduceRight((t,i)=>i!=null&&t==null?i:t,null);function pa({x:e,y:t,z:i},n){let s=this.datasets.findIndex(({key:r})=>e===r);s===-1&&(s=this.datasets.push({key:e,data:Array(this.datasets[0].data.length).fill(null)})-1,this.chart.addSeries(ji({label:e,unit:this.options.unit},s-1),s)),this.datasets=this.datasets.map((r,o)=>(o===0?r.data.push(i):o===s?r.data.push(n.call(this,t,$n(r.data)||0)):r.data.push(null),r))}var Xr=({pruneThreshold:e=1e3})=>e,hi=class{static __projections(){return{counter:(t,i)=>i+1,last_value:t=>t,sum:(t,i)=>i+t}}static getConfig(t){return{class:t.kind,title:t.title,width:t.width,height:t.height,series:[{...Jr()},ji(t,0)],scales:{x:{min:t.now-60,max:t.now},y:{min:0,max:1}},axes:[Wr(),zr(t)]}}static initialData(){return[[],[]]}constructor(t,i){this.__callback=this.constructor.__projections()[i.metric],this.chart=t,this.datasets=[{key:"|x|",data:[]}],this.options=i,this.pruneThreshold=Xr(i),i.tagged?(this.chart.delSeries(1),this.__handler=pa):(this.datasets.push({key:i.label,data:[]}),this.__handler=fa)}handleMeasurements(t){t.forEach(n=>this.__handler.call(this,n,this.__callback)),this.datasets[0].data.length>=this.pruneThreshold&&(this.datasets=this.datasets.map(({data:n,...s})=>({data:n.slice(-this.pruneThreshold),...s}))),this.chart.setData(Yr(this.datasets))}},ci=class{constructor(t,i){let n=this.constructor.getConfig(t);n.series[1].values=this.__seriesValues.bind(this),this.datasets=[{key:"|x|",data:[]}],this.chart=new Un(n,this.constructor.initialData(t),i),this.pruneThreshold=Xr(t),this.options=t,t.tagged?(this.chart.delSeries(1),this.__handler=this.handleTaggedMeasurement.bind(this)):(this.datasets.push(this.constructor.newDataset(t.label)),this.__handler=this.handleMeasurement.bind(this))}handleMeasurements(t){t.forEach(i=>this.__handler(i)),this.__maybePruneDatasets(),this.chart.setData(Yr(this.datasets))}handleTaggedMeasurement(t){let i=this.findOrCreateSeries(t.x);this.handleMeasurement(t,i)}handleMeasurement(t,i=1){let{z:n}=t;this.datasets=this.datasets.map((s,r)=>(s.key==="|x|"?s.data.push(n):r===i?this.pushToDataset(s,t):this.pushToDataset(s,null),s))}findOrCreateSeries(t){let i=this.datasets.findIndex(({key:n})=>t===n);if(i===-1){i=this.datasets.push(this.constructor.newDataset(t,this.datasets[0].data.length))-1;let n={values:this.__seriesValues.bind(this),...ji({label:t},i-1)};this.chart.addSeries(n,i)}return i}pushToDataset(t,i){if(i===null){t.data.push(null),t.agg.avg.push(null),t.agg.max.push(null),t.agg.min.push(null);return}let{y:n}=i;return t.agg.count++,t.agg.total+=n,t.data.push(n),(t.last.min===null||n<t.last.min)&&(t.last.min=n),t.agg.min.push(t.last.min),(t.last.max===null||n>t.last.max)&&(t.last.max=n),t.agg.max.push(t.last.max),t.agg.avg.push(t.agg.total/t.agg.count),t}__maybePruneDatasets(){if(this.datasets[0].data.length>this.pruneThreshold){let i=-this.pruneThreshold;this.datasets=this.datasets.map(({key:n,data:s,agg:r})=>{let o=s.slice(i);if(!r)return{key:n,data:o};let{avg:a,count:u,max:d,min:v,total:w}=r,g=v.slice(i),p=d.slice(i);return{key:n,data:o,agg:{avg:a.slice(i),count:u,min:g,max:p,total:w},last:{min:$n(g),max:$n(p)}}})}}__seriesValues(t,i,n){let s=this.datasets[i];if(s&&s.data&&s.data[n]){let{agg:{avg:r,max:o,min:a},data:u}=s;return{Value:u[n].toFixed(3),Min:a[n].toFixed(3),Max:o[n].toFixed(3),Avg:r[n].toFixed(3)}}else return{Value:"--",Min:"--",Max:"--",Avg:"--"}}static initialData(){return[[],[]]}static getConfig(t){return{class:t.kind,title:t.title,width:t.width,height:t.height,series:[{...Jr()},ji(t,0)],scales:{x:{min:t.now-60,max:t.now},y:{min:0,max:1}},axes:[Wr(),zr(t)]}}static newDataset(t,i=0){let n=i>0?Array(i).fill(null):[];return{key:t,data:[...n],agg:{avg:[...n],count:0,max:[...n],min:[...n],total:0},last:{max:null,min:null}}}},Vr={counter:hi,last_value:hi,sum:hi,summary:ci},jn=class{constructor(t,i){if(i.metric){if(i.metric&&!Vr[i.metric])throw new TypeError(`No metric defined for type ${i.metric}`)}else throw new TypeError("No metric type was provided");let n=Vr[i.metric];n===ci?(this.metric=new ci(i,t),this.uplotChart=this.metric.chart):(this.uplotChart=new Un(n.getConfig(i),n.initialData(i),t),this.metric=new n(this.uplotChart,i));let s=typeof i.refreshInterval<"u";this._isBufferingData=s,this._buffer=[],this._timer=s?setInterval(this._flushToChart.bind(this),+i.refreshInterval):null}clearTimers(){clearInterval(this._timer)}resize(t){this.uplotChart.setSize({width:Math.max(t.width,$i.width),height:$i.height})}pushData(t){if(!t.length)return;(this._isBufferingData?this._pushToBuffer:this._pushToChart).call(this,t)}_pushToBuffer(t){this._buffer=this._buffer.concat(t)}_pushToChart(t){this.metric.handleMeasurements(t)}_flushToChart(){let t=this._flushBuffer();!t.length||this._pushToChart(t)}_flushBuffer(){if(this._buffer&&!this._buffer.length)return[];let t=this._buffer;return this._buffer=[],t.reduce((i,n)=>i.concat(n),[])}},ga={mounted(){let e=this.el.parentElement.querySelector(".chart"),t=e.getBoundingClientRect(),i=Object.assign({},e.dataset,{tagged:e.dataset.tags&&e.dataset.tags!==""||!1,width:Math.max(t.width,$i.width),height:$i.height,now:new Date/1e3,refreshInterval:1e3});this.chart=new jn(e,i),window.addEventListener("resize",da(()=>{let n=e.getBoundingClientRect();this.chart.resize(n)}))},updated(){let e=Array.from(this.el.children||[]).map(({dataset:{x:t,y:i,z:n}})=>({x:t,y:+i,z:+n/1e6}));e.length>0&&this.chart.pushData(e)},destroyed(){this.chart.clearTimers()}},qr=ga;var ma=e=>{let t=`${e.key}=${e.value};path=/`;window.location.protocol==="https:"&&(t+=";samesite=strict"),e.domain&&(t+=`;domain=${e.domain}`),document.cookie=t},va=e=>{let t="Thu, 01 Jan 1970 00:00:00 GMT";document.cookie=`${e.key}=; expires=${t}`},ba=e=>e.el.hasAttribute("data-cookie-enabled"),ya=e=>({key:e.el.getAttribute("data-cookie-key"),value:e.el.getAttribute("data-cookie-value"),domain:e.el.getAttribute("data-cookie-domain")}),wa={updated(){let e=ya(this);va(e),ba(this)&&ma(e)}},Kr=wa;var Sa=e=>{if(!navigator.clipboard)e.select(),e.setSelectionRange(0,99999),document.execCommand("copy");else{let t=e.value;navigator.clipboard.writeText(t)}},ka={mounted(){this.el.querySelector(".btn-primary").addEventListener("click",e=>{let t=this.el.querySelector("textarea");Sa(t);let i=this.el.querySelector(".copy-indicator");i.setAttribute("data-enabled","false"),i.offsetWidth,i.setAttribute("data-enabled","true")})}},Gr=ka;var Ca={updated(){if(this.el.querySelector(".logger-autoscroll-checkbox").checked){let e=this.el.querySelector("#logger-messages");e.scrollTop=e.scrollHeight}}},Qr=Ca;var eo=".progress-bar, .color-bar-legend-entry",Bi,Zr=e=>{e.querySelectorAll(eo).forEach(t=>{if(Bi){let i=t.getAttribute("data-name")!==Bi;t.setAttribute("data-muted",i)}else t.removeAttribute("data-muted")})},Aa={mounted(){this.el.setAttribute("data-highlight-enabled","true"),this.el.querySelectorAll(eo).forEach(e=>e.addEventListener("click",t=>{let i=t.currentTarget.getAttribute("data-name");Bi=i===Bi?null:i,Zr(this.el)}))},updated(){this.el.setAttribute("data-highlight-enabled","true"),Zr(this.el)}},to=Aa;var io="_refresh_data";function no(e,t){let i=JSON.stringify(e),n=Ta(i);Ea(io,n,t,15768e4)}function Vi(){let e=xa(io);if(e){let t=_a(e);return JSON.parse(t)}else return null}function xa(e){let t=document.cookie.split("; ").find(i=>i.startsWith(`${e}=`));return t?t.replace(`${e}=`,""):null}function Ea(e,t,i,n){let s=`${e}=${t};max-age=${n};path=${i}`;document.cookie=s}function Ta(e){return btoa(unescape(encodeURIComponent(e)))}function _a(e){return decodeURIComponent(escape(atob(e)))}var Pa={updated(){let e=Vi()||{};e[this.el.dataset.page]=this.el.value,no(e,this.el.dataset.dashboardMountPath)}},so=Pa;var Ra={PhxChartComponent:qr,PhxRequestLoggerCookie:Kr,PhxRequestLoggerQueryParameter:Gr,PhxRequestLoggerMessages:Qr,PhxColorBarHighlight:to,PhxRememberRefresh:so},Da=document.querySelector("html").getAttribute("phx-socket")||"/live",La=document.querySelector("meta[name='csrf-token']").getAttribute("content"),Jn=new qs(Da,vs,{hooks:Ra,params:e=>({_csrf_token:La,refresh_data:Vi()})}),Tt=Jn.socket,Ia=Tt.onConnError,Bn=!0;Tt.onOpen(()=>{Bn=!1});Tt.onConnError=(...e)=>{Bn?(Bn=!1,Tt.disconnect(null,3e3),Tt.transport=Gt,Tt.connect()):Ia.apply(Tt,e)};window.addEventListener("phx:page-loading-start",e=>Vn.default.start());window.addEventListener("phx:page-loading-stop",e=>Vn.default.done());Jn.connect();window.liveSocket=Jn;})();
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */
//# sourceMappingURL=data:application/json;base64,
